<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux | Daniel Molitor</title><link>https://dmolitor.com/category/linux/</link><atom:link href="https://dmolitor.com/category/linux/index.xml" rel="self" type="application/rss+xml"/><description>Linux</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 04 May 2022 00:00:00 +0000</lastBuildDate><image><url>https://dmolitor.com/media/icon_hucde9d3bf436934aea32678e4ee07e929_14509_512x512_fill_lanczos_center_3.png</url><title>Linux</title><link>https://dmolitor.com/category/linux/</link></image><item><title>Building Python from Source</title><link>https://dmolitor.com/post/2022-05-04-python-from-source/</link><pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate><guid>https://dmolitor.com/post/2022-05-04-python-from-source/</guid><description>
&lt;script src="https://dmolitor.com/post/2022-05-04-python-from-source/index_files/header-attrs/header-attrs.js">&lt;/script>
&lt;p>This document will walk through building Python from source and (for my own
personal utility) setting up a comprehensive global Python environment. It draws
largely &lt;a href="https://tttapa.github.io/Pages/Ubuntu/Software-Installation/Python.html">from this document&lt;/a>. &lt;strong>Note&lt;/strong>: my current OS is Ubuntu, 22.04, LTS Jammy Jellyfish.&lt;/p>
&lt;div id="build-python" class="section level2">
&lt;h2>Build Python&lt;/h2>
&lt;div id="install-dependencies" class="section level3">
&lt;h3>Install Dependencies&lt;/h3>
&lt;pre>&lt;code>sudo apt -y update
sudo apt -y install gcc \
g++ \
make \
wget \
zlib1g-dev \
libbz2-dev \
libssl-dev \
uuid-dev \
libffi-dev \
libreadline-dev \
libsqlite3-dev \
tk-dev \
libbz2-dev \
libncurses5-dev \
libreadline6-dev \
libgdbm-dev \
liblzma-dev \
libgdbm-compat-dev&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="download-and-extract-source" class="section level3">
&lt;h3>Download and Extract Source&lt;/h3>
&lt;p>The current latest version of python is &lt;code>3.10.4&lt;/code>.&lt;/p>
&lt;pre class="shell">&lt;code>cd /tmp
sudo wget &amp;quot;https://www.python.org/ftp/python/3.10.4/Python-3.10.4.tgz&amp;quot;
sudo tar xf Python-3.10.4.tgz&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="configure-build-settings" class="section level3">
&lt;h3>Configure Build Settings&lt;/h3>
&lt;p>The installation location is &lt;code>~/.local&lt;/code>.&lt;/p>
&lt;pre>&lt;code>cd Python-3.10.4
./configure --prefix=&amp;quot;$HOME/.local&amp;quot; \
--enable-ipv6 \
--enable-shared \
--with-lto --enable-optimizations \
&amp;#39;LDFLAGS=-Wl,-rpath,\$$ORIGIN/../lib&amp;#39;&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="build-python-1" class="section level3">
&lt;h3>Build Python&lt;/h3>
&lt;p>This will build in parallel with as many cores as the system has available.&lt;/p>
&lt;pre>&lt;code>make -j$(nproc)&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="install-python" class="section level3">
&lt;h3>Install Python&lt;/h3>
&lt;pre>&lt;code>make install&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div id="create-environment" class="section level2">
&lt;h2>Create Environment&lt;/h2>
&lt;div id="create-global-python-virtual-env" class="section level3">
&lt;h3>Create Global Python Virtual Env&lt;/h3>
&lt;p>I will create a default Python virtual environment at &lt;code>~/.venv/default&lt;/code>.&lt;/p>
&lt;pre>&lt;code>mkdir ~/.venv
cd ~/.venv
~/.local/bin/python3 -m venv default
source default/bin/activate&lt;/code>&lt;/pre>
&lt;p>Assuming you have a url to a text file containing all Python modules you want to
install (which I do), download that package list as follows:&lt;/p>
&lt;pre>&lt;code>python -c &amp;quot;import urllib.request; import os; packages = urllib.request.urlopen(&amp;#39;url-to-package-list.txt&amp;#39;).read().decode(&amp;#39;utf-8&amp;#39;); filename = os.path.expanduser(&amp;#39;~&amp;#39;) + &amp;#39;/packages.txt&amp;#39;; file_ = open(filename, &amp;#39;w&amp;#39;); file_.write(packages); file_.close()&amp;quot;&lt;/code>&lt;/pre>
&lt;p>Now, pip install all the specified modules.&lt;/p>
&lt;pre>&lt;code>pip install -r ../packages.txt --upgrade --force-reinstall --no-cache-dir
deactivate&lt;/code>&lt;/pre>
&lt;p>And voila, there you have it!&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Shiny Server Setup</title><link>https://dmolitor.com/post/2022-02-03-shiny-server-setup/</link><pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate><guid>https://dmolitor.com/post/2022-02-03-shiny-server-setup/</guid><description>
&lt;script src="https://dmolitor.com/post/2022-02-03-shiny-server-setup/index_files/header-attrs/header-attrs.js">&lt;/script>
&lt;p>Because of the number of computing platforms and the varied processes involved
in setting up a virtual machine (VM) on each of them, this tutorial will begin
under the assumption that you have already established and connected to a
suitable VM. For my own personal uses I am using a Digital Ocean VM with
Ubuntu 20.04 Focal Fossa as the OS.&lt;/p>
&lt;p>Additionally, this document is effectively just a personal wiki and some steps
are pretty specific to my own setup so mileage may vary.&lt;/p>
&lt;div id="install-rshiny-server-and-all-dependencies" class="section level2">
&lt;h2>Install R/Shiny Server and all dependencies&lt;/h2>
&lt;p>The first step is to install the most recent version of R, as well as a robust
set of the most important R packages.
&lt;div class="alert alert-note">
&lt;div>
This installation will take &amp;gt;= 2 hrs on most VMs.
&lt;/div>
&lt;/div>
&lt;/p>
&lt;pre>&lt;code># Update indices
sudo apt update -y -qq
# Install the dependencies necessary to add a new repository over HTTPS:
sudo apt-get -y install \
dirmngr \
gnupg \
apt-transport-https \
ca-certificates \
software-properties-common
# Add the CRAN repository to your system sources list:
# - Add the signing key (by Michael Rutter) for these repos
# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc
# Fingerprint: 298A3A825C0D65DFD57CBB651716619E084DAB9
sudo wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc
# - Add the R 4.0 repo from CRAN
sudo add-apt-repository &amp;quot;deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/&amp;quot;
# Install base R and dependencies for full set of R packages
sudo apt-get -y install \
r-base \
r-base-dev \
libssl-dev \
libcurl4-openssl-dev \
libxml2-dev \
libfontconfig1-dev \
libcairo2-dev \
libgmp3-dev \
libmpfr-dev \
libv8-dev \
unixodbc-dev \
libpq-dev \
libudunits2-dev \
libgdal-dev \
gsl-bin \
libgsl0-dev \
libharfbuzz-dev \
libfribidi-dev \
cmake
# Install R packages
sudo R -e &amp;#39;install.packages(read.table(&amp;quot;https://gist.githubusercontent.com/dmolitor/f88b3edd1fd02716ff08888a815db35a/raw/8298cc7d28aa0c03a7e0330e338fa7c85d0ee782/r-packages.txt&amp;quot;)[[&amp;quot;V1&amp;quot;]], Ncpus = parallel::detectCores())&amp;#39;&lt;/code>&lt;/pre>
&lt;p>Once R and the packages have been installed, the next step is to install Shiny
Server and all its dependencies.&lt;/p>
&lt;pre>&lt;code># Install Shiny Server and dependencies
sudo apt-get -y install gdebi-core
wget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.17.973-amd64.deb
sudo gdebi -n shiny-server-1.5.17.973-amd64.deb&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="verify-shiny-server-is-running" class="section level2">
&lt;h2>Verify Shiny Server is running&lt;/h2>
&lt;p>Locate the public IP of your VM and in your web browser enter
&lt;code>http://vm.public.ip:3838/&lt;/code>. If Shiny Server is active and running correctly,
you should see something like the following:
&lt;img src="shiny-welcome.png" />&lt;/p>
&lt;/div>
&lt;div id="configure-shiny-server-as-git-repo" class="section level2">
&lt;h2>Configure Shiny Server as Git repo&lt;/h2>
&lt;pre>&lt;code># Ensure shiny-server directory has full read/write permissions
sudo chmod -R 777 /srv/shiny-server
# Generate new SSH key for connecting to Github (just hit enter for all prompts)
ssh-keygen -t ed25519
eval &amp;quot;$(ssh-agent -s)&amp;quot;
ssh-add ~/.ssh/id_ed25519&lt;/code>&lt;/pre>
&lt;p>The steps above generate a new SSH key, but now you must add this SSH key to
your Github account. To do so, follow the steps in
&lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">this article&lt;/a> closely. Now that you’ve added the SSH key to your Github account,
it’s time to configure your Github credentials and clone your Shiny Server repo
to the VM. To do this, execute:&lt;/p>
&lt;pre>&lt;code># Configure git credentials
git config --global user.email &amp;quot;you@example.com&amp;quot;
git config --global user.name &amp;quot;Your Name&amp;quot;
# Navigate to shiny-server directory
cd /srv/shiny-server
sudo rm -r *
git init
# Clone repo
git remote add origin git@github.com:path-to-repo-head.git
git pull origin master
git branch --set-upstream-to=origin/master master
cd ~&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="install-and-configure-nginx" class="section level2">
&lt;h2>Install and configure nginx&lt;/h2>
&lt;pre>&lt;code># Install nginx
sudo apt-get -y install nginx
# Edit nginx config
sudo vi /etc/nginx/sites-enabled/default&lt;/code>&lt;/pre>
&lt;p>This will open the &lt;code>nginx&lt;/code> config file. Add the following lines &lt;strong>above&lt;/strong> the
line that reads &lt;code>server {&lt;/code>&lt;/p>
&lt;pre>&lt;code>map $http_upgrade $connection_upgrade {
default upgrade;
&amp;#39;&amp;#39; close;
}&lt;/code>&lt;/pre>
&lt;p>And add the following lines right &lt;strong>after&lt;/strong> the line that reads &lt;code>server_name _;&lt;/code>&lt;/p>
&lt;pre>&lt;code>location /shiny/ {
proxy_pass http://127.0.0.1:3838/;
proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $connection_upgrade;
rewrite ^(/shiny/[^/]+)$ $1/ permanent;
}&lt;/code>&lt;/pre>
&lt;p>Now, save the changes. Since you edited the &lt;code>nginx&lt;/code> config file you will need to
restart the service with &lt;code>sudo service nginx restart&lt;/code>. Now, instead of accessing
Shiny Server with &lt;code>http://vm.public.ip:3838&lt;/code> you should be able to access it
with &lt;code>http://vm.public.ip/shiny&lt;/code>.&lt;/p>
&lt;p>The final step in configuring &lt;code>nginx&lt;/code> is to overwrite the default .html landing
page with a personalized landing page.
&lt;div class="alert alert-note">
&lt;div>
This assumes that you have a file named
&lt;code>index.nginx-debian.html&lt;/code> in the root of your &lt;code>shiny-server&lt;/code> github repo.
&lt;/div>
&lt;/div>
&lt;/p>
&lt;pre>&lt;code>sudo cp -rf /srv/shiny-server/index.nginx-debian.html /var/www/html/&lt;/code>&lt;/pre>
&lt;p>Now, when you access &lt;code>http://vm.public.ip&lt;/code>, you should see a pretty landing
page.&lt;/p>
&lt;/div>
&lt;div id="bonus-stuff-configuring-basic-authentication" class="section level2">
&lt;h2>Bonus Stuff (Configuring Basic Authentication)&lt;/h2>
&lt;p>Obviously, setting up some form of basic authentication will depend on your
desired level of privacy. Also this will probably keep the average person from
accessing your apps but definitely is a fairly light level of security.
Anywho, let’s proceed…&lt;/p>
&lt;pre>&lt;code># Install necessary dependency
sudo apt-get install apache2-utils
# Shut down Shiny Server and nginx
sudo service nginx stop
sudo service shiny-server stop
# Edit nginx default config
sudo vi /etc/nginx/sites-available/default&lt;/code>&lt;/pre>
&lt;p>Once you are in the file, you will tweak the existing server function as
follows:&lt;/p>
&lt;pre>&lt;code>server {
listen 80 default_server;
listen [::]:80 default_server;
### Authentication ### &amp;lt;------ YOU MUST COPY/PASTE IN THIS WHOLE AUTH CHUNK
auth_basic &amp;quot;Username and Password are required&amp;quot;;
auth_basic_user_file /etc/nginx/.htpasswd;
######################&lt;/code>&lt;/pre>
&lt;p>Then, within the &lt;code>location /shiny/ {&lt;/code> chunk, enter the following:&lt;/p>
&lt;pre>&lt;code>auth_basic on;&lt;/code>&lt;/pre>
&lt;p>Now, save and exit the file. Next you need to create a &lt;code>username&lt;/code> user and
corresponding password &lt;code>user-password&lt;/code> at the hint like:&lt;/p>
&lt;pre>&lt;code>cd /etc/nginx
sudo htpasswd -c /etc/nginx/.htpasswd username
# Restart the services!
cd ~
sudo service nginx start
sudo service shiny-server start&lt;/code>&lt;/pre>
&lt;p>You have now established basic authentication and when you access any page on
your server you should see something like the following:
&lt;img src="basic-auth.png" />&lt;/p>
&lt;/div>
&lt;div id="conclusion" class="section level2">
&lt;h2>Conclusion&lt;/h2>
&lt;p>You have now configured Shiny Server and can view it at
&lt;code>http://vm.public.ip/shiny/&lt;/code>! 🎉🥳&lt;/p>
&lt;/div></description></item></channel></rss>