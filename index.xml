<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Daniel Molitor</title><link>https://dmolitor.com/</link><atom:link href="https://dmolitor.com/index.xml" rel="self" type="application/rss+xml"/><description>Daniel Molitor</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate><image><url>https://dmolitor.com/media/icon_hucde9d3bf436934aea32678e4ee07e929_14509_512x512_fill_lanczos_center_3.png</url><title>Daniel Molitor</title><link>https://dmolitor.com/</link></image><item><title>Python basics</title><link>https://dmolitor.com/courses/example/python/</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><guid>https://dmolitor.com/courses/example/python/</guid><description>&lt;p>Build a foundation in Python.&lt;/p>
&lt;p>
&lt;i class="fas fa-clock pr-1 fa-fw">&lt;/i> 1-2 hours per week, for 8 weeks&lt;/p>
&lt;h2 id="learn">Learn&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/rfscVS0vtbw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="quiz">Quiz&lt;/h2>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>What is the difference between lists and tuples?&lt;/summary>
&lt;p>&lt;p>Lists&lt;/p>
&lt;ul>
&lt;li>Lists are mutable - they can be changed&lt;/li>
&lt;li>Slower than tuples&lt;/li>
&lt;li>Syntax: &lt;code>a_list = [1, 2.0, 'Hello world']&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Tuples&lt;/p>
&lt;ul>
&lt;li>Tuples are immutable - they can&amp;rsquo;t be changed&lt;/li>
&lt;li>Tuples are faster than lists&lt;/li>
&lt;li>Syntax: &lt;code>a_tuple = (1, 2.0, 'Hello world')&lt;/code>&lt;/li>
&lt;/ul>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-3">
&lt;summary>Is Python case-sensitive?&lt;/summary>
&lt;p>Yes&lt;/p>
&lt;/details></description></item><item><title>Visualization</title><link>https://dmolitor.com/courses/example/visualization/</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><guid>https://dmolitor.com/courses/example/visualization/</guid><description>&lt;p>Learn how to visualize data with Plotly.&lt;/p>
&lt;p>
&lt;i class="fas fa-clock pr-1 fa-fw">&lt;/i> 1-2 hours per week, for 8 weeks&lt;/p>
&lt;h2 id="learn">Learn&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/hSPmj7mK6ng" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="quiz">Quiz&lt;/h2>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>When is a heatmap useful?&lt;/summary>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-3">
&lt;summary>Write Plotly code to render a bar chart&lt;/summary>
&lt;p>&lt;pre>&lt;code class="language-python">import plotly.express as px
data_canada = px.data.gapminder().query(&amp;quot;country == 'Canada'&amp;quot;)
fig = px.bar(data_canada, x='year', y='pop')
fig.show()
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details></description></item><item><title>Statistics</title><link>https://dmolitor.com/courses/example/stats/</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><guid>https://dmolitor.com/courses/example/stats/</guid><description>&lt;p>Introduction to statistics for data science.&lt;/p>
&lt;p>
&lt;i class="fas fa-clock pr-1 fa-fw">&lt;/i> 1-2 hours per week, for 8 weeks&lt;/p>
&lt;h2 id="learn">Learn&lt;/h2>
&lt;p>The general form of the &lt;strong>normal&lt;/strong> probability density function is:&lt;/p>
&lt;p>$$
f(x) = \frac{1}{\sigma \sqrt{2\pi} } e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^2}
$$&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
The parameter $\mu$ is the mean or expectation of the distribution.
$\sigma$ is its standard deviation.
The variance of the distribution is $\sigma^{2}$.
&lt;/div>
&lt;/div>
&lt;h2 id="quiz">Quiz&lt;/h2>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>What is the parameter $\mu$?&lt;/summary>
&lt;p>The parameter $\mu$ is the mean or expectation of the distribution.&lt;/p>
&lt;/details></description></item><item><title>Example Talk</title><link>https://dmolitor.com/talk/example-talk/</link><pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate><guid>https://dmolitor.com/talk/example-talk/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Click on the &lt;strong>Slides&lt;/strong> button above to view the built-in slides feature.
&lt;/div>
&lt;/div>
&lt;p>Slides can be added in a few ways:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Create&lt;/strong> slides using Wowchemy&amp;rsquo;s &lt;a href="https://wowchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">&lt;em>Slides&lt;/em>&lt;/a> feature and link using &lt;code>slides&lt;/code> parameter in the front matter of the talk file&lt;/li>
&lt;li>&lt;strong>Upload&lt;/strong> an existing slide deck to &lt;code>static/&lt;/code> and link using &lt;code>url_slides&lt;/code> parameter in the front matter of the talk file&lt;/li>
&lt;li>&lt;strong>Embed&lt;/strong> your slides (e.g. Google Slides) or presentation video on this page using &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">shortcodes&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Further event details, including &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">page elements&lt;/a> such as image galleries, can be added to the body of this page.&lt;/p></description></item><item><title>Housing Prices Prediction</title><link>https://dmolitor.com/post/2022-02-02-housing-price-prediction/</link><pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate><guid>https://dmolitor.com/post/2022-02-02-housing-price-prediction/</guid><description>
&lt;script src="https://dmolitor.com/post/2022-02-02-housing-price-prediction/index_files/header-attrs/header-attrs.js">&lt;/script>
&lt;p>The goal of this short project is to document a fairly realistic ML pipeline, including data cleaning, data visualization, and model development, in both R and Python.&lt;/p>
&lt;div id="python" class="section level1">
&lt;h1>Python&lt;/h1>
&lt;div id="requisite-modules" class="section level2">
&lt;h2>Requisite modules&lt;/h2>
&lt;pre class="python">&lt;code>import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import scipy
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestRegressor
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import cross_val_score, GridSearchCV, StratifiedShuffleSplit
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.tree import DecisionTreeRegressor&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="import-data" class="section level2">
&lt;h2>Import data&lt;/h2>
&lt;pre class="python">&lt;code>housing = pd.read_csv(
&amp;quot;https://raw.githubusercontent.com/ageron/handson-ml2/master/datasets/housing/housing.csv&amp;quot;
)
# Get data structure
housing.info()&lt;/code>&lt;/pre>
&lt;pre>&lt;code># &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
# RangeIndex: 20640 entries, 0 to 20639
# Data columns (total 10 columns):
# # Column Non-Null Count Dtype
# --- ------ -------------- -----
# 0 longitude 20640 non-null float64
# 1 latitude 20640 non-null float64
# 2 housing_median_age 20640 non-null float64
# 3 total_rooms 20640 non-null float64
# 4 total_bedrooms 20433 non-null float64
# 5 population 20640 non-null float64
# 6 households 20640 non-null float64
# 7 median_income 20640 non-null float64
# 8 median_house_value 20640 non-null float64
# 9 ocean_proximity 20640 non-null object
# dtypes: float64(9), object(1)
# memory usage: 1.6+ MB&lt;/code>&lt;/pre>
&lt;p>We can also quickly summarize the housing data.&lt;/p>
&lt;pre class="python">&lt;code>housing.describe()&lt;/code>&lt;/pre>
&lt;pre>&lt;code># longitude latitude ... median_income median_house_value
# count 20640.000000 20640.000000 ... 20640.000000 20640.000000
# mean -119.569704 35.631861 ... 3.870671 206855.816909
# std 2.003532 2.135952 ... 1.899822 115395.615874
# min -124.350000 32.540000 ... 0.499900 14999.000000
# 25% -121.800000 33.930000 ... 2.563400 119600.000000
# 50% -118.490000 34.260000 ... 3.534800 179700.000000
# 75% -118.010000 37.710000 ... 4.743250 264725.000000
# max -114.310000 41.950000 ... 15.000100 500001.000000
#
# [8 rows x 9 columns]&lt;/code>&lt;/pre>
&lt;p>Now that we have a quick overview of the data, we can plot a histogram of all
numeric values.&lt;/p>
&lt;pre class="python">&lt;code>housing.hist(bins = 50, figsize = (30, 15));
plt.show()&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dmolitor.com/post/2022-02-02-housing-price-prediction/index_files/figure-html/Numeric%20Hist-1.png" width="2880" />&lt;/p>
&lt;p>We’re going to bin the &lt;code>median_income&lt;/code> variable to allow for stratified sampling
within income bins.&lt;/p>
&lt;pre class="python">&lt;code>housing[&amp;quot;median_income_bin&amp;quot;] = pd.cut(
housing[&amp;quot;median_income&amp;quot;],
bins = [0, 1.5, 3, 4.5, 6, np.inf],
labels = [1, 2, 3, 4, 5]
)
# Plot histogram of counts
housing[&amp;quot;median_income_bin&amp;quot;].hist();
plt.show()&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dmolitor.com/post/2022-02-02-housing-price-prediction/index_files/figure-html/Cut%20Income-3.png" width="2880" />&lt;/p>
&lt;/div>
&lt;div id="visualize-data" class="section level2">
&lt;h2>Visualize data&lt;/h2>
&lt;p>Now, let’s visualize the median house prices by plotting them geographically.&lt;/p>
&lt;pre class="python">&lt;code>(
housing.
rename(columns = {&amp;quot;median_house_value&amp;quot;: &amp;quot;Median House Value&amp;quot;}).
plot(
kind = &amp;quot;scatter&amp;quot;,
x = &amp;quot;longitude&amp;quot;,
y = &amp;quot;latitude&amp;quot;,
alpha = 0.1,
s = housing[&amp;quot;population&amp;quot;]/100,
c = &amp;quot;Median House Value&amp;quot;,
colormap = plt.get_cmap(&amp;quot;jet&amp;quot;),
colorbar = True,
title = &amp;quot;Median House Prices by Population&amp;quot;,
xlabel = &amp;quot;Longitude&amp;quot;,
ylabel = &amp;quot;Latitude&amp;quot;
)
)
plt.show()&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dmolitor.com/post/2022-02-02-housing-price-prediction/index_files/figure-html/Prices%20Geo-5.png" width="672" />&lt;/p>
&lt;p>Let’s also look at the correlation between a few of our numeric variables.&lt;/p>
&lt;pre class="python">&lt;code>pd.plotting.scatter_matrix(
housing[
[
&amp;quot;median_house_value&amp;quot;,
&amp;quot;median_income&amp;quot;,
&amp;quot;total_rooms&amp;quot;,
&amp;quot;housing_median_age&amp;quot;
]
],
alpha = 0.1,
figsize = (15, 8)
);
plt.show()&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dmolitor.com/post/2022-02-02-housing-price-prediction/index_files/figure-html/Cor%20Plot-7.png" width="1440" />&lt;/p>
&lt;p>Let’s specifically take a look at the relationship between &lt;code>median_income&lt;/code> and
&lt;code>median_house_value&lt;/code>.&lt;/p>
&lt;pre class="python">&lt;code>(
housing.
rename(
columns = {
&amp;quot;median_income&amp;quot;: &amp;quot;Median Income&amp;quot;,
&amp;quot;median_house_value&amp;quot;: &amp;quot;Median House Value&amp;quot;
}
).
plot(
kind = &amp;quot;scatter&amp;quot;,
x = &amp;quot;Median Income&amp;quot;,
y = &amp;quot;Median House Value&amp;quot;,
alpha = 0.1
)
)
plt.show()&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dmolitor.com/post/2022-02-02-housing-price-prediction/index_files/figure-html/Income%20House%20Value-9.png" width="672" />&lt;/p>
&lt;/div>
&lt;div id="feature-engineering" class="section level2">
&lt;h2>Feature engineering&lt;/h2>
&lt;p>We want to create a couple new features: &lt;code>rooms_per_household&lt;/code> and
&lt;code>bedrooms_per_room&lt;/code>.&lt;/p>
&lt;pre class="python">&lt;code>housing[&amp;quot;rooms_per_household&amp;quot;] = housing[&amp;quot;total_rooms&amp;quot;]/housing[&amp;quot;households&amp;quot;]
housing[&amp;quot;bedrooms_per_room&amp;quot;] = housing[&amp;quot;total_bedrooms&amp;quot;]/housing[&amp;quot;total_rooms&amp;quot;]
housing[&amp;quot;pop_per_household&amp;quot;] = housing[&amp;quot;population&amp;quot;]/housing[&amp;quot;households&amp;quot;]&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="modeling-prep" class="section level2">
&lt;h2>Modeling prep&lt;/h2>
&lt;p>Let’s do an 70-30 split of the data initially.&lt;/p>
&lt;pre class="python">&lt;code>split = StratifiedShuffleSplit(
n_splits = 1,
test_size = 0.3,
random_state = 123
)
for train_idx, test_idx in split.split(housing, housing[&amp;quot;median_income_bin&amp;quot;]):
train = housing.loc[train_idx].drop(
[&amp;quot;median_income_bin&amp;quot;, &amp;quot;median_house_value&amp;quot;],
axis = 1
)
train_labels = housing.loc[train_idx, &amp;quot;median_house_value&amp;quot;]
test = housing.loc[test_idx].drop(
[&amp;quot;median_income_bin&amp;quot;, &amp;quot;median_house_value&amp;quot;],
axis = 1
)
test_labels = housing.loc[test_idx, &amp;quot;median_house_value&amp;quot;]&lt;/code>&lt;/pre>
&lt;p>Now, let’s prep the data for modeling.&lt;/p>
&lt;pre class="python">&lt;code># Numeric transformations
num_transform = Pipeline(
[
(&amp;quot;imputer&amp;quot;, SimpleImputer(strategy = &amp;quot;median&amp;quot;)),
(&amp;quot;scaler&amp;quot;, StandardScaler())
]
)
full_transform = ColumnTransformer(
[
(
&amp;quot;numeric&amp;quot;,
num_transform,
list(train.drop(&amp;quot;ocean_proximity&amp;quot;, axis = 1).columns)
),
(&amp;quot;categorical&amp;quot;, OneHotEncoder(), [&amp;quot;ocean_proximity&amp;quot;])
]
)
train = full_transform.fit_transform(train)
test = full_transform.transform(test)&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="train-models" class="section level2">
&lt;h2>Train models&lt;/h2>
&lt;p>Let’s quick chalk up a function to print CV metrics.&lt;/p>
&lt;pre class="python">&lt;code>def metrics_summary(scores):
print(&amp;quot;Mean: &amp;quot;, scores.mean().round(2))
print(&amp;quot;Standard Dev.: &amp;quot;, scores.std().round(2))&lt;/code>&lt;/pre>
&lt;div id="linear-regression" class="section level3">
&lt;h3>Linear Regression&lt;/h3>
&lt;p>The first model is a simple linear regression model.&lt;/p>
&lt;pre class="python">&lt;code># Fit model
lin_reg_scores = np.sqrt(
-cross_val_score(
LinearRegression(),
train,
train_labels,
scoring = &amp;quot;neg_mean_squared_error&amp;quot;,
cv = 10
)
)
# Summarize score info
metrics_summary(lin_reg_scores)&lt;/code>&lt;/pre>
&lt;pre>&lt;code># Mean: 68005.1
# Standard Dev.: 2417.76&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="decision-tree" class="section level3">
&lt;h3>Decision Tree&lt;/h3>
&lt;p>The next model is a single decision tree model.&lt;/p>
&lt;pre class="python">&lt;code># Fit model
tree_reg = np.sqrt(
-cross_val_score(
DecisionTreeRegressor(),
train,
train_labels,
scoring = &amp;quot;neg_mean_squared_error&amp;quot;,
cv = 10
)
)
# Summarize score info
metrics_summary(tree_reg)&lt;/code>&lt;/pre>
&lt;pre>&lt;code># Mean: 71631.6
# Standard Dev.: 2614.03&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="random-forest" class="section level3">
&lt;h3>Random Forest&lt;/h3>
&lt;p>Now, we will run a random forest model.&lt;/p>
&lt;pre class="python">&lt;code># Fit model
forest_reg = np.sqrt(
-cross_val_score(
RandomForestRegressor(n_estimators = 30),
train,
train_labels,
scoring = &amp;quot;neg_mean_squared_error&amp;quot;,
cv = 10
)
)
# Summarize score info
metrics_summary(forest_reg)&lt;/code>&lt;/pre>
&lt;pre>&lt;code># Mean: 51298.21
# Standard Dev.: 1698.51&lt;/code>&lt;/pre>
&lt;p>And finally, we will tune our random forest model via grid search.&lt;/p>
&lt;pre class="python">&lt;code># Fit model
forest_reg_grid = GridSearchCV(
RandomForestRegressor(),
param_grid = {
&amp;quot;n_estimators&amp;quot;: [30],
&amp;quot;min_samples_leaf&amp;quot;: [5],
&amp;quot;max_features&amp;quot;: [&amp;quot;sqrt&amp;quot;]
},
scoring = &amp;quot;neg_mean_squared_error&amp;quot;,
cv = 5,
return_train_score = True
)
forest_reg_grid_fit = forest_reg_grid.fit(train, train_labels)
# Get CV results
cv_results = forest_reg_grid_fit.cv_results_
# Summarize score info
for mean_sc, param in zip(cv_results[&amp;quot;mean_test_score&amp;quot;], cv_results[&amp;quot;params&amp;quot;]):
print(&amp;quot;Mean: &amp;quot;, np.sqrt(-mean_sc).round(2))
print(&amp;quot;Parameters: &amp;quot;, param)&lt;/code>&lt;/pre>
&lt;pre>&lt;code># Mean: 51821.79
# Parameters: {&amp;#39;max_features&amp;#39;: &amp;#39;sqrt&amp;#39;, &amp;#39;min_samples_leaf&amp;#39;: 5, &amp;#39;n_estimators&amp;#39;: 30}&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div id="final-predictions" class="section level2">
&lt;h2>Final predictions&lt;/h2>
&lt;pre class="python">&lt;code># Extract model
final_model = forest_reg_grid_fit.best_estimator_
# Make predictions
final_preds = final_model.predict(test)
# Final RMSE
print(
&amp;quot;Test RMSE: &amp;quot;, np.sqrt(mean_squared_error(test_labels, final_preds)).round(2)
)&lt;/code>&lt;/pre>
&lt;pre>&lt;code># Test RMSE: 50810.13&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div id="r" class="section level1">
&lt;h1>R&lt;/h1>
&lt;div id="requisite-packages" class="section level2">
&lt;h2>Requisite packages&lt;/h2>
&lt;pre class="r">&lt;code>library(dplyr)
library(ggplot2)
library(purrr)
library(ranger)
library(readr)
library(rpart)
library(rsample)
library(sf)
library(tidyr)
library(viridis)
library(yardstick)&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="import-data-1" class="section level2">
&lt;h2>Import data&lt;/h2>
&lt;pre class="r">&lt;code>housing &amp;lt;- read_csv(
&amp;quot;https://raw.githubusercontent.com/ageron/handson-ml2/master/datasets/housing/housing.csv&amp;quot;,
show_col_types = FALSE
)
# Get data structure
glimpse(housing)&lt;/code>&lt;/pre>
&lt;pre>&lt;code># Rows: 20,640
# Columns: 10
# $ longitude &amp;lt;dbl&amp;gt; -122.23, -122.22, -122.24, -122.25, -122.25, -122.2~
# $ latitude &amp;lt;dbl&amp;gt; 37.88, 37.86, 37.85, 37.85, 37.85, 37.85, 37.84, 37~
# $ housing_median_age &amp;lt;dbl&amp;gt; 41, 21, 52, 52, 52, 52, 52, 52, 42, 52, 52, 52, 52,~
# $ total_rooms &amp;lt;dbl&amp;gt; 880, 7099, 1467, 1274, 1627, 919, 2535, 3104, 2555,~
# $ total_bedrooms &amp;lt;dbl&amp;gt; 129, 1106, 190, 235, 280, 213, 489, 687, 665, 707, ~
# $ population &amp;lt;dbl&amp;gt; 322, 2401, 496, 558, 565, 413, 1094, 1157, 1206, 15~
# $ households &amp;lt;dbl&amp;gt; 126, 1138, 177, 219, 259, 193, 514, 647, 595, 714, ~
# $ median_income &amp;lt;dbl&amp;gt; 8.3252, 8.3014, 7.2574, 5.6431, 3.8462, 4.0368, 3.6~
# $ median_house_value &amp;lt;dbl&amp;gt; 452600, 358500, 352100, 341300, 342200, 269700, 299~
# $ ocean_proximity &amp;lt;chr&amp;gt; &amp;quot;NEAR BAY&amp;quot;, &amp;quot;NEAR BAY&amp;quot;, &amp;quot;NEAR BAY&amp;quot;, &amp;quot;NEAR BAY&amp;quot;, &amp;quot;NE~&lt;/code>&lt;/pre>
&lt;p>Now, to get a quick summary of the data.&lt;/p>
&lt;pre class="r">&lt;code>summary(housing)&lt;/code>&lt;/pre>
&lt;pre>&lt;code># longitude latitude housing_median_age total_rooms
# Min. :-124.3 Min. :32.54 Min. : 1.00 Min. : 2
# 1st Qu.:-121.8 1st Qu.:33.93 1st Qu.:18.00 1st Qu.: 1448
# Median :-118.5 Median :34.26 Median :29.00 Median : 2127
# Mean :-119.6 Mean :35.63 Mean :28.64 Mean : 2636
# 3rd Qu.:-118.0 3rd Qu.:37.71 3rd Qu.:37.00 3rd Qu.: 3148
# Max. :-114.3 Max. :41.95 Max. :52.00 Max. :39320
#
# total_bedrooms population households median_income
# Min. : 1.0 Min. : 3 Min. : 1.0 Min. : 0.4999
# 1st Qu.: 296.0 1st Qu.: 787 1st Qu.: 280.0 1st Qu.: 2.5634
# Median : 435.0 Median : 1166 Median : 409.0 Median : 3.5348
# Mean : 537.9 Mean : 1425 Mean : 499.5 Mean : 3.8707
# 3rd Qu.: 647.0 3rd Qu.: 1725 3rd Qu.: 605.0 3rd Qu.: 4.7432
# Max. :6445.0 Max. :35682 Max. :6082.0 Max. :15.0001
# NA&amp;#39;s :207
# median_house_value ocean_proximity
# Min. : 14999 Length:20640
# 1st Qu.:119600 Class :character
# Median :179700 Mode :character
# Mean :206856
# 3rd Qu.:264725
# Max. :500001
# &lt;/code>&lt;/pre>
&lt;p>Now that we have a quick overview of the data, we can plot a histogram of all
numeric values.&lt;/p>
&lt;pre class="r">&lt;code>housing |&amp;gt;
select(where(is.numeric)) |&amp;gt;
pivot_longer(
cols = everything(),
names_to = &amp;quot;variable&amp;quot;,
values_to = &amp;quot;values&amp;quot;
) |&amp;gt;
ggplot(aes(x = values)) +
geom_histogram(fill = &amp;quot;lightblue&amp;quot;, bins = 50) +
facet_wrap(
~ variable,
nrow = 3,
scales = &amp;quot;free&amp;quot;
) +
labs(
x = &amp;quot;&amp;quot;,
y = &amp;quot;&amp;quot;
) +
theme_minimal()&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dmolitor.com/post/2022-02-02-housing-price-prediction/index_files/figure-html/Numeric%20Hist%202-1.png" width="1440" />&lt;/p>
&lt;p>We’re going to bin the &lt;code>median_income&lt;/code> variable to allow for stratified sampling
within income bins.&lt;/p>
&lt;pre class="r">&lt;code>housing &amp;lt;- housing |&amp;gt;
mutate(
median_income_bin = cut(
median_income,
breaks = c(0, 1.5, 3, 4.5, 6, Inf),
labels = c(1, 2, 3, 4, 5)
)
)
# Plot histogram of counts
hist(
as.numeric(housing$median_income_bin),
main = &amp;quot;&amp;quot;,
xlab = &amp;quot;Median Income Bin&amp;quot;,
ylab = &amp;quot;Count&amp;quot;,
ylim = c(0, 8000)
)&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dmolitor.com/post/2022-02-02-housing-price-prediction/index_files/figure-html/Cut%20Income%202-1.png" width="672" />&lt;/p>
&lt;/div>
&lt;div id="visualize-data-1" class="section level2">
&lt;h2>Visualize data&lt;/h2>
&lt;p>Now, let’s visualize the median house prices by plotting them geographically.&lt;/p>
&lt;pre class="r">&lt;code>housing |&amp;gt;
rename(
&amp;quot;Population&amp;quot; = &amp;quot;population&amp;quot;,
&amp;quot;Median House Value&amp;quot; = &amp;quot;median_house_value&amp;quot;
) |&amp;gt;
st_as_sf(coords = c(&amp;quot;longitude&amp;quot;, &amp;quot;latitude&amp;quot;)) |&amp;gt;
st_set_crs(value = 4326) |&amp;gt;
ggplot(
aes(
size = Population,
color = `Median House Value`
)
) +
geom_sf(alpha = 0.1) +
theme_minimal() +
theme(
axis.text = element_text(face = &amp;quot;bold&amp;quot;),
legend.title = element_text(face = &amp;quot;bold&amp;quot;),
plot.title = element_text(hjust = 0.5, face = &amp;quot;bold&amp;quot;)
) +
scale_color_viridis(option = &amp;quot;B&amp;quot;) +
guides(size = &amp;quot;none&amp;quot;) +
labs(
title = &amp;quot;Median House Prices by Population&amp;quot;,
x = &amp;quot;Longitude&amp;quot;,
y = &amp;quot;Latitude&amp;quot;
)&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dmolitor.com/post/2022-02-02-housing-price-prediction/index_files/figure-html/Prices%20Geo%202-1.png" width="1152" />&lt;/p>
&lt;p>Let’s also look at the correlation between a few of our numeric variables.&lt;/p>
&lt;pre class="r">&lt;code>plot(
select(
housing,
c(
&amp;quot;median_house_value&amp;quot;,
&amp;quot;median_income&amp;quot;,
&amp;quot;total_rooms&amp;quot;,
&amp;quot;housing_median_age&amp;quot;
)
),
col = rgb(red = 0, green = 0, blue = 0, alpha = 0.1)
)&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dmolitor.com/post/2022-02-02-housing-price-prediction/index_files/figure-html/Cor%20Plot%202-1.png" width="1152" />&lt;/p>
&lt;p>Let’s specifically take a look at the relationship between &lt;code>median_income&lt;/code> and
&lt;code>median_house_value&lt;/code>.&lt;/p>
&lt;pre class="r">&lt;code>housing |&amp;gt;
ggplot(aes(x = median_income, y = median_house_value)) +
geom_point(alpha = 0.1) +
theme_minimal() +
theme(
axis.text = element_text(face = &amp;quot;bold&amp;quot;),
plot.title = element_text(hjust = 0.5, face = &amp;quot;bold&amp;quot;)
) +
labs(x = &amp;quot;Median Income&amp;quot;, y = &amp;quot;Median House Value&amp;quot;)&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dmolitor.com/post/2022-02-02-housing-price-prediction/index_files/figure-html/Income%20House%20Value%202-1.png" width="672" />&lt;/p>
&lt;/div>
&lt;div id="feature-engineering-1" class="section level2">
&lt;h2>Feature engineering&lt;/h2>
&lt;p>We want to create a couple new features: &lt;code>rooms_per_household&lt;/code> and
&lt;code>bedrooms_per_room&lt;/code>.&lt;/p>
&lt;pre class="r">&lt;code>housing &amp;lt;- housing |&amp;gt;
mutate(
rooms_per_household = total_rooms/households,
bedrooms_per_room = total_bedrooms/total_rooms,
pop_per_household = population/households
)&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="modeling-prep-1" class="section level2">
&lt;h2>Modeling prep&lt;/h2>
&lt;p>Let’s do an 70-30 split of the data initially.&lt;/p>
&lt;pre class="r">&lt;code>set.seed(123)
split &amp;lt;- initial_split(
data = housing,
prop = 0.7,
strata = &amp;quot;median_income_bin&amp;quot;
)
train &amp;lt;- training(split) |&amp;gt; select(-median_income_bin)
test &amp;lt;- testing(split) |&amp;gt; select(-median_income_bin)&lt;/code>&lt;/pre>
&lt;p>Now, let’s prep the data for modeling.&lt;/p>
&lt;pre class="r">&lt;code># Get median values from training data
medians &amp;lt;- suppressWarnings(
lapply(train, median, na.rm = TRUE)
)
# Median impute
train &amp;lt;- map2_df(
.x = train,
.y = medians,
.f = ~ case_when(
is.numeric(.x) ~ replace_na(.x, .y),
TRUE ~ .x
)
) |&amp;gt;
mutate(ocean_proximity = sort_factor(ocean_proximity))
test &amp;lt;- map2_df(
.x = test,
.y = medians,
.f = ~ case_when(
is.numeric(.x) ~ replace_na(.x, .y),
TRUE ~ .x
)
) |&amp;gt;
mutate(ocean_proximity = sort_factor(ocean_proximity))&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="train-models-1" class="section level2">
&lt;h2>Train models&lt;/h2>
&lt;p>First, let’s split the training data into a 10-fold CV split and make a quick
function to print CV metrics.&lt;/p>
&lt;pre class="r">&lt;code>train_cv &amp;lt;- vfold_cv(train, v = 10)
# Summarise CV metrics
metrics_summary &amp;lt;- function(scores) {
print(paste0(&amp;quot;Mean: &amp;quot;, round(mean(scores), 2)))
print(paste0(&amp;quot;Standard Dev.: &amp;quot;, round(sd(scores), 2)))
}&lt;/code>&lt;/pre>
&lt;div id="linear-regression-1" class="section level3">
&lt;h3>Linear Regression&lt;/h3>
&lt;p>The first model is a simple linear regression model.&lt;/p>
&lt;pre class="r">&lt;code># Fit model
lin_reg_scores = map_dbl(
train_cv$splits,
function(i) {
lin_mod &amp;lt;- lm(median_house_value ~ ., data = i$data[i$in_id, ])
lin_preds &amp;lt;- predict(lin_mod, i$data[-i$in_id, ])
rmse_vec(i$data[-i$in_id, ][[&amp;quot;median_house_value&amp;quot;]], lin_preds)
}
)
# Summarize score info
metrics_summary(lin_reg_scores)&lt;/code>&lt;/pre>
&lt;pre>&lt;code># [1] &amp;quot;Mean: 68071.59&amp;quot;
# [1] &amp;quot;Standard Dev.: 2677.06&amp;quot;&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="decision-tree-1" class="section level3">
&lt;h3>Decision Tree&lt;/h3>
&lt;p>The next model is a single decision tree model.&lt;/p>
&lt;pre class="r">&lt;code># Fit model
tree_reg_scores = map_dbl(
train_cv$splits,
function(i) {
tree_mod &amp;lt;- rpart(median_house_value ~ ., data = i$data[i$in_id, ])
tree_preds &amp;lt;- predict(tree_mod, i$data[-i$in_id, ])
rmse_vec(i$data[-i$in_id, ][[&amp;quot;median_house_value&amp;quot;]], tree_preds)
}
)
# Summarize score info
metrics_summary(tree_reg_scores)&lt;/code>&lt;/pre>
&lt;pre>&lt;code># [1] &amp;quot;Mean: 72015.68&amp;quot;
# [1] &amp;quot;Standard Dev.: 2842.71&amp;quot;&lt;/code>&lt;/pre>
&lt;/div>
&lt;div id="random-forest-1" class="section level3">
&lt;h3>Random Forest&lt;/h3>
&lt;p>Now, we will run a random forest model.&lt;/p>
&lt;pre class="r">&lt;code># Fit model
forest_reg_scores = map_dbl(
train_cv$splits,
function(i) {
forest_mod &amp;lt;- ranger(median_house_value ~ ., data = i$data[i$in_id, ], 100)
forest_preds &amp;lt;- predict(forest_mod, i$data[-i$in_id, ])$predictions
rmse_vec(i$data[-i$in_id, ][[&amp;quot;median_house_value&amp;quot;]], forest_preds)
}
)
# Summarize score info
metrics_summary(tree_reg_scores)&lt;/code>&lt;/pre>
&lt;pre>&lt;code># [1] &amp;quot;Mean: 72015.68&amp;quot;
# [1] &amp;quot;Standard Dev.: 2842.71&amp;quot;&lt;/code>&lt;/pre>
&lt;p>And finally, we will tune our random forest model via grid search.&lt;/p>
&lt;pre class="r">&lt;code># Create grid
param_grid &amp;lt;- expand.grid(num.trees = 100, mtry = 5, min.node.size = 3)
# Fit model
forest_reg_grid &amp;lt;- map(
1:nrow(param_grid),
function(grid_idx) {
map_dbl(
train_cv$splits,
function(cv_fold) {
# LOO CV Model
forest_mod &amp;lt;- ranger(
median_house_value ~ .,
data = cv_fold$data[cv_fold$in_id, ],
num.trees = param_grid[grid_idx, ]$num.trees,
mtry = param_grid[grid_idx, ]$mtry,
min.node.size = param_grid[grid_idx, ]$min.node.size
)
# OOS Predictions
forest_preds &amp;lt;- predict(forest_mod, cv_fold$data[-cv_fold$in_id, ])$predictions
# Calculate RMSE
rmse_vec(
truth = cv_fold$data[-cv_fold$in_id, ][[&amp;quot;median_house_value&amp;quot;]],
estimate = forest_preds
)
}
)
}
)
# Get best model
best_mod &amp;lt;- which.min(map_dbl(forest_reg_grid, mean))
forest_reg_grid_fit = ranger(
median_house_value ~ .,
data = train,
num.trees = param_grid[best_mod, ]$num.trees,
mtry = param_grid[best_mod, ]$mtry,
min.node.size = param_grid[best_mod, ]$min.node.size
)
# Summarize score info
walk(forest_reg_grid, metrics_summary)&lt;/code>&lt;/pre>
&lt;pre>&lt;code># [1] &amp;quot;Mean: 48819.23&amp;quot;
# [1] &amp;quot;Standard Dev.: 1829.59&amp;quot;&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div id="final-predictions-1" class="section level2">
&lt;h2>Final predictions&lt;/h2>
&lt;pre class="r">&lt;code># Extract model
final_model = forest_reg_grid_fit
# Make predictions
final_preds = predict(final_model, test)$predictions
# Final RMSE
cat(
&amp;quot;Test RMSE:&amp;quot;, rmse_vec(test$median_house_value, final_preds)
)&lt;/code>&lt;/pre>
&lt;pre>&lt;code># Test RMSE: 49288.67&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div></description></item><item><title>Welcome to Wowchemy, the website builder for Hugo</title><link>https://dmolitor.com/post-examples/getting-started/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://dmolitor.com/post-examples/getting-started/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;ol>
&lt;li>The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site&lt;/li>
&lt;li>The template can be modified and customised to suit your needs. It&amp;rsquo;s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a &lt;strong>no-code solution (write in Markdown and customize with YAML parameters)&lt;/strong> and having &lt;strong>flexibility to later add even deeper personalization with HTML and CSS&lt;/strong>&lt;/li>
&lt;li>You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more&lt;/li>
&lt;/ol>
&lt;h2 id="get-started">Get Started&lt;/h2>
&lt;ul>
&lt;li>👉 &lt;a href="https://wowchemy.com/templates/" target="_blank" rel="noopener">&lt;strong>Create a new site&lt;/strong>&lt;/a>&lt;/li>
&lt;li>📚 &lt;a href="https://wowchemy.com/docs/" target="_blank" rel="noopener">&lt;strong>Personalize your site&lt;/strong>&lt;/a>&lt;/li>
&lt;li>💬 &lt;a href="https://discord.gg/z8wNYzb" target="_blank" rel="noopener">Chat with the &lt;strong>Wowchemy community&lt;/strong>&lt;/a> or &lt;a href="https://discourse.gohugo.io" target="_blank" rel="noopener">&lt;strong>Hugo community&lt;/strong>&lt;/a>&lt;/li>
&lt;li>🐦 Twitter: &lt;a href="https://twitter.com/wowchemy" target="_blank" rel="noopener">@wowchemy&lt;/a> &lt;a href="https://twitter.com/GeorgeCushen" target="_blank" rel="noopener">@GeorgeCushen&lt;/a> &lt;a href="https://twitter.com/search?q=%28%23MadeWithWowchemy%20OR%20%23MadeWithAcademic%29&amp;amp;src=typed_query" target="_blank" rel="noopener">#MadeWithWowchemy&lt;/a>&lt;/li>
&lt;li>💡 &lt;a href="https://github.com/wowchemy/wowchemy-hugo-modules/issues" target="_blank" rel="noopener">Request a &lt;strong>feature&lt;/strong> or report a &lt;strong>bug&lt;/strong> for &lt;em>Wowchemy&lt;/em>&lt;/a>&lt;/li>
&lt;li>⬆️ &lt;strong>Updating Wowchemy?&lt;/strong> View the &lt;a href="https://wowchemy.com/docs/guide/update/" target="_blank" rel="noopener">Update Guide&lt;/a> and &lt;a href="https://wowchemy.com/updates/" target="_blank" rel="noopener">Release Notes&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="crowd-funded-open-source-software">Crowd-funded open-source software&lt;/h2>
&lt;p>To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.&lt;/p>
&lt;h3 id="-click-here-to-become-a-sponsor-and-help-support-wowchemys-future-httpswowchemycomplans">&lt;a href="https://wowchemy.com/plans/" target="_blank" rel="noopener">❤️ Click here to become a sponsor and help support Wowchemy&amp;rsquo;s future ❤️&lt;/a>&lt;/h3>
&lt;p>As a token of appreciation for sponsoring, you can &lt;strong>unlock &lt;a href="https://wowchemy.com/plans/" target="_blank" rel="noopener">these&lt;/a> awesome rewards and extra features 🦄✨&lt;/strong>&lt;/p>
&lt;h2 id="ecosystem">Ecosystem&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/wowchemy/hugo-academic-cli" target="_blank" rel="noopener">Hugo Academic CLI&lt;/a>:&lt;/strong> Automatically import publications from BibTeX&lt;/li>
&lt;/ul>
&lt;h2 id="inspiration">Inspiration&lt;/h2>
&lt;p>&lt;a href="https://academic-demo.netlify.com/" target="_blank" rel="noopener">Check out the latest &lt;strong>demo&lt;/strong>&lt;/a> of what you&amp;rsquo;ll get in less than 10 minutes, or &lt;a href="https://wowchemy.com/user-stories/" target="_blank" rel="noopener">view the &lt;strong>showcase&lt;/strong>&lt;/a> of personal, project, and business sites.&lt;/p>
&lt;h2 id="features">Features&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Page builder&lt;/strong> - Create &lt;em>anything&lt;/em> with &lt;a href="https://wowchemy.com/docs/page-builder/" target="_blank" rel="noopener">&lt;strong>widgets&lt;/strong>&lt;/a> and &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">&lt;strong>elements&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;strong>Edit any type of content&lt;/strong> - Blog posts, publications, talks, slides, projects, and more!&lt;/li>
&lt;li>&lt;strong>Create content&lt;/strong> in &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">&lt;strong>Markdown&lt;/strong>&lt;/a>, &lt;a href="https://wowchemy.com/docs/import/jupyter/" target="_blank" rel="noopener">&lt;strong>Jupyter&lt;/strong>&lt;/a>, or &lt;a href="https://wowchemy.com/docs/install-locally/" target="_blank" rel="noopener">&lt;strong>RStudio&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;strong>Plugin System&lt;/strong> - Fully customizable &lt;a href="https://wowchemy.com/docs/customization/" target="_blank" rel="noopener">&lt;strong>color&lt;/strong> and &lt;strong>font themes&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;strong>Display Code and Math&lt;/strong> - Code highlighting and &lt;a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics" target="_blank" rel="noopener">LaTeX math&lt;/a> supported&lt;/li>
&lt;li>&lt;strong>Integrations&lt;/strong> - &lt;a href="https://analytics.google.com" target="_blank" rel="noopener">Google Analytics&lt;/a>, &lt;a href="https://disqus.com" target="_blank" rel="noopener">Disqus commenting&lt;/a>, Maps, Contact Forms, and more!&lt;/li>
&lt;li>&lt;strong>Beautiful Site&lt;/strong> - Simple and refreshing one page design&lt;/li>
&lt;li>&lt;strong>Industry-Leading SEO&lt;/strong> - Help get your website found on search engines and social media&lt;/li>
&lt;li>&lt;strong>Media Galleries&lt;/strong> - Display your images and videos with captions in a customizable gallery&lt;/li>
&lt;li>&lt;strong>Mobile Friendly&lt;/strong> - Look amazing on every screen with a mobile friendly version of your site&lt;/li>
&lt;li>&lt;strong>Multi-language&lt;/strong> - 34+ language packs including English, 中文, and Português&lt;/li>
&lt;li>&lt;strong>Multi-user&lt;/strong> - Each author gets their own profile page&lt;/li>
&lt;li>&lt;strong>Privacy Pack&lt;/strong> - Assists with GDPR&lt;/li>
&lt;li>&lt;strong>Stand Out&lt;/strong> - Bring your site to life with animation, parallax backgrounds, and scroll effects&lt;/li>
&lt;li>&lt;strong>One-Click Deployment&lt;/strong> - No servers. No databases. Only files.&lt;/li>
&lt;/ul>
&lt;h2 id="themes">Themes&lt;/h2>
&lt;p>Wowchemy and its templates come with &lt;strong>automatic day (light) and night (dark) mode&lt;/strong> built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the &lt;a href="https://academic-demo.netlify.com/" target="_blank" rel="noopener">Demo&lt;/a> to see it in action! Day/night mode can also be disabled by the site admin in &lt;code>params.toml&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://wowchemy.com/docs/customization" target="_blank" rel="noopener">Choose a stunning &lt;strong>theme&lt;/strong> and &lt;strong>font&lt;/strong>&lt;/a> for your site. Themes are fully customizable.&lt;/p>
&lt;h2 id="license">License&lt;/h2>
&lt;p>Copyright 2016-present &lt;a href="https://georgecushen.com" target="_blank" rel="noopener">George Cushen&lt;/a>.&lt;/p>
&lt;p>Released under the &lt;a href="https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md" target="_blank" rel="noopener">MIT&lt;/a> license.&lt;/p></description></item><item><title>Writing technical content in Academic</title><link>https://dmolitor.com/post-examples/writing-technical-content/</link><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid>https://dmolitor.com/post-examples/writing-technical-content/</guid><description>&lt;p>Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.&lt;/p>
&lt;p>&lt;strong>Highlight your code snippets, take notes on math classes, and draw diagrams from textual representation.&lt;/strong>&lt;/p>
&lt;p>On this page, you&amp;rsquo;ll find some examples of the types of technical content that can be rendered with Academic.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;h3 id="code">Code&lt;/h3>
&lt;p>Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the &lt;code>highlight&lt;/code> option in your &lt;code>config/_default/params.toml&lt;/code> file.&lt;/p>
&lt;pre>&lt;code>```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;pre>&lt;code class="language-python">import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
&lt;/code>&lt;/pre>
&lt;h3 id="charts">Charts&lt;/h3>
&lt;p>Academic supports the popular &lt;a href="https://plot.ly/" target="_blank" rel="noopener">Plotly&lt;/a> chart format.&lt;/p>
&lt;p>Save your Plotly JSON in your page folder, for example &lt;code>chart.json&lt;/code>, and then add the &lt;code>{{&amp;lt; chart data=&amp;quot;chart&amp;quot; &amp;gt;}}&lt;/code> shortcode where you would like the chart to appear.&lt;/p>
&lt;p>Demo:&lt;/p>
&lt;div id="chart-659237184" class="chart">&lt;/div>
&lt;script>
(function() {
let a = setInterval( function() {
if ( typeof window.Plotly === 'undefined' ) {
return;
}
clearInterval( a );
Plotly.d3.json("./line-chart.json", function(chart) {
Plotly.plot('chart-659237184', chart.data, chart.layout, {responsive: true});
});
}, 500 );
})();
&lt;/script>
&lt;p>You might also find the &lt;a href="http://plotly-json-editor.getforge.io/" target="_blank" rel="noopener">Plotly JSON Editor&lt;/a> useful.&lt;/p>
&lt;h3 id="math">Math&lt;/h3>
&lt;p>Academic supports a Markdown extension for $\LaTeX$ math. You can enable this feature by toggling the &lt;code>math&lt;/code> option in your &lt;code>config/_default/params.toml&lt;/code> file.&lt;/p>
&lt;p>To render &lt;em>inline&lt;/em> or &lt;em>block&lt;/em> math, wrap your LaTeX math with &lt;code>$...$&lt;/code> or &lt;code>$$...$$&lt;/code>, respectively.&lt;/p>
&lt;p>Example &lt;strong>math block&lt;/strong>:&lt;/p>
&lt;pre>&lt;code class="language-latex">$$\gamma_{n} = \frac{
\left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T
\left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}
{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}$$
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;p>$$\gamma_{n} = \frac{ \left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T \left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}{\left |\nabla F(\mathbf{x}&lt;em>{n}) - \nabla F(\mathbf{x}&lt;/em>{n-1}) \right |^2}$$&lt;/p>
&lt;p>Example &lt;strong>inline math&lt;/strong> &lt;code>$\nabla F(\mathbf{x}_{n})$&lt;/code> renders as $\nabla F(\mathbf{x}_{n})$.&lt;/p>
&lt;p>Example &lt;strong>multi-line math&lt;/strong> using the &lt;code>\\\\&lt;/code> math linebreak:&lt;/p>
&lt;pre>&lt;code class="language-latex">$$f(k;p_{0}^{*}) = \begin{cases}p_{0}^{*} &amp;amp; \text{if }k=1, \\\\
1-p_{0}^{*} &amp;amp; \text{if }k=0.\end{cases}$$
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;p>$$f(k;p_{0}^{&lt;em>}) = \begin{cases}p_{0}^{&lt;/em>} &amp;amp; \text{if }k=1, \\
1-p_{0}^{*} &amp;amp; \text{if }k=0.\end{cases}$$&lt;/p>
&lt;h3 id="diagrams">Diagrams&lt;/h3>
&lt;p>Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the &lt;code>diagram&lt;/code> option in your &lt;code>config/_default/params.toml&lt;/code> file or by adding &lt;code>diagram: true&lt;/code> to your page front matter.&lt;/p>
&lt;p>An example &lt;strong>flowchart&lt;/strong>:&lt;/p>
&lt;pre>&lt;code>```mermaid
graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
```
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;pre>&lt;code class="language-mermaid">graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
&lt;/code>&lt;/pre>
&lt;p>An example &lt;strong>sequence diagram&lt;/strong>:&lt;/p>
&lt;pre>&lt;code>```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;pre>&lt;code class="language-mermaid">sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/code>&lt;/pre>
&lt;p>An example &lt;strong>Gantt diagram&lt;/strong>:&lt;/p>
&lt;pre>&lt;code>```mermaid
gantt
section Section
Completed :done, des1, 2014-01-06,2014-01-08
Active :active, des2, 2014-01-07, 3d
Parallel 1 : des3, after des1, 1d
Parallel 2 : des4, after des1, 1d
Parallel 3 : des5, after des3, 1d
Parallel 4 : des6, after des4, 1d
```
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;pre>&lt;code class="language-mermaid">gantt
section Section
Completed :done, des1, 2014-01-06,2014-01-08
Active :active, des2, 2014-01-07, 3d
Parallel 1 : des3, after des1, 1d
Parallel 2 : des4, after des1, 1d
Parallel 3 : des5, after des3, 1d
Parallel 4 : des6, after des4, 1d
&lt;/code>&lt;/pre>
&lt;p>An example &lt;strong>class diagram&lt;/strong>:&lt;/p>
&lt;pre>&lt;code>```mermaid
classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
&amp;lt;&amp;lt;service&amp;gt;&amp;gt;
int id
size()
}
```
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;pre>&lt;code class="language-mermaid">classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
&amp;lt;&amp;lt;service&amp;gt;&amp;gt;
int id
size()
}
&lt;/code>&lt;/pre>
&lt;p>An example &lt;strong>state diagram&lt;/strong>:&lt;/p>
&lt;pre>&lt;code>```mermaid
stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
```
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;pre>&lt;code class="language-mermaid">stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
&lt;/code>&lt;/pre>
&lt;h3 id="todo-lists">Todo lists&lt;/h3>
&lt;p>You can even write your todo lists in Academic too:&lt;/p>
&lt;pre>&lt;code class="language-markdown">- [x] Write math example
- [x] Write diagram example
- [ ] Do something else
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Write math example&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Write diagram example&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Do something else&lt;/li>
&lt;/ul>
&lt;h3 id="tables">Tables&lt;/h3>
&lt;p>Represent your data in tables:&lt;/p>
&lt;pre>&lt;code class="language-markdown">| First Header | Second Header |
| ------------- | ------------- |
| Content Cell | Content Cell |
| Content Cell | Content Cell |
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>First Header&lt;/th>
&lt;th>Second Header&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Content Cell&lt;/td>
&lt;td>Content Cell&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Content Cell&lt;/td>
&lt;td>Content Cell&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="callouts">Callouts&lt;/h3>
&lt;p>Academic supports a &lt;a href="https://wowchemy.com/docs/content/writing-markdown-latex/#callouts" target="_blank" rel="noopener">shortcode for callouts&lt;/a>, also referred to as &lt;em>asides&lt;/em>, &lt;em>hints&lt;/em>, or &lt;em>alerts&lt;/em>. By wrapping a paragraph in &lt;code>{{% callout note %}} ... {{% /callout %}}&lt;/code>, it will render as an aside.&lt;/p>
&lt;pre>&lt;code class="language-markdown">{{% callout note %}}
A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
{{% /callout %}}
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
&lt;/div>
&lt;/div>
&lt;h3 id="spoilers">Spoilers&lt;/h3>
&lt;p>Add a spoiler to a page to reveal text, such as an answer to a question, after a button is clicked.&lt;/p>
&lt;pre>&lt;code class="language-markdown">{{&amp;lt; spoiler text=&amp;quot;Click to view the spoiler&amp;quot; &amp;gt;}}
You found me!
{{&amp;lt; /spoiler &amp;gt;}}
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>Click to view the spoiler&lt;/summary>
&lt;p>You found me!&lt;/p>
&lt;/details>
&lt;h3 id="icons">Icons&lt;/h3>
&lt;p>Academic enables you to use a wide range of &lt;a href="https://sourcethemes.com/academic/docs/page-builder/#icons" target="_blank" rel="noopener">icons from &lt;em>Font Awesome&lt;/em> and &lt;em>Academicons&lt;/em>&lt;/a> in addition to &lt;a href="https://sourcethemes.com/academic/docs/writing-markdown-latex/#emojis" target="_blank" rel="noopener">emojis&lt;/a>.&lt;/p>
&lt;p>Here are some examples using the &lt;code>icon&lt;/code> shortcode to render icons:&lt;/p>
&lt;pre>&lt;code class="language-markdown">{{&amp;lt; icon name=&amp;quot;terminal&amp;quot; pack=&amp;quot;fas&amp;quot; &amp;gt;}} Terminal
{{&amp;lt; icon name=&amp;quot;python&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} Python
{{&amp;lt; icon name=&amp;quot;r-project&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} R
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;p>
&lt;i class="fas fa-terminal pr-1 fa-fw">&lt;/i> Terminal&lt;br>
&lt;i class="fab fa-python pr-1 fa-fw">&lt;/i> Python&lt;br>
&lt;i class="fab fa-r-project pr-1 fa-fw">&lt;/i> R&lt;/p>
&lt;h3 id="did-you-find-this-page-helpful-consider-sharing-it-">Did you find this page helpful? Consider sharing it 🙌&lt;/h3></description></item><item><title>An example preprint / working paper</title><link>https://dmolitor.com/publication/preprint/</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://dmolitor.com/publication/preprint/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
&lt;p>Supplementary notes can be added here, including &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">code, math, and images&lt;/a>.&lt;/p></description></item><item><title>Slides</title><link>https://dmolitor.com/slides/example/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://dmolitor.com/slides/example/</guid><description>&lt;h1 id="create-slides-in-markdown-with-wowchemy">Create slides in Markdown with Wowchemy&lt;/h1>
&lt;p>&lt;a href="https://wowchemy.com/" target="_blank" rel="noopener">Wowchemy&lt;/a> | &lt;a href="https://owchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">Documentation&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="features">Features&lt;/h2>
&lt;ul>
&lt;li>Efficiently write slides in Markdown&lt;/li>
&lt;li>3-in-1: Create, Present, and Publish your slides&lt;/li>
&lt;li>Supports speaker notes&lt;/li>
&lt;li>Mobile friendly slides&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="controls">Controls&lt;/h2>
&lt;ul>
&lt;li>Next: &lt;code>Right Arrow&lt;/code> or &lt;code>Space&lt;/code>&lt;/li>
&lt;li>Previous: &lt;code>Left Arrow&lt;/code>&lt;/li>
&lt;li>Start: &lt;code>Home&lt;/code>&lt;/li>
&lt;li>Finish: &lt;code>End&lt;/code>&lt;/li>
&lt;li>Overview: &lt;code>Esc&lt;/code>&lt;/li>
&lt;li>Speaker notes: &lt;code>S&lt;/code>&lt;/li>
&lt;li>Fullscreen: &lt;code>F&lt;/code>&lt;/li>
&lt;li>Zoom: &lt;code>Alt + Click&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/hakimel/reveal.js#pdf-export" target="_blank" rel="noopener">PDF Export&lt;/a>: &lt;code>E&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="code-highlighting">Code Highlighting&lt;/h2>
&lt;p>Inline code: &lt;code>variable&lt;/code>&lt;/p>
&lt;p>Code block:&lt;/p>
&lt;pre>&lt;code class="language-python">porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
print(&amp;quot;Eating...&amp;quot;)
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="math">Math&lt;/h2>
&lt;p>In-line math: $x + y = z$&lt;/p>
&lt;p>Block math:&lt;/p>
&lt;p>$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p>
&lt;hr>
&lt;h2 id="fragments">Fragments&lt;/h2>
&lt;p>Make content appear incrementally&lt;/p>
&lt;pre>&lt;code>{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code>&lt;/pre>
&lt;p>Press &lt;code>Space&lt;/code> to play!&lt;/p>
&lt;span class="fragment " >
One
&lt;/span>
&lt;span class="fragment " >
**Two**
&lt;/span>
&lt;span class="fragment " >
Three
&lt;/span>
&lt;hr>
&lt;p>A fragment can accept two optional parameters:&lt;/p>
&lt;ul>
&lt;li>&lt;code>class&lt;/code>: use a custom style (requires definition in custom CSS)&lt;/li>
&lt;li>&lt;code>weight&lt;/code>: sets the order in which a fragment appears&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="speaker-notes">Speaker Notes&lt;/h2>
&lt;p>Add speaker notes to your presentation&lt;/p>
&lt;pre>&lt;code class="language-markdown">{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code>&lt;/pre>
&lt;p>Press the &lt;code>S&lt;/code> key to view the speaker notes!&lt;/p>
&lt;aside class="notes">
&lt;ul>
&lt;li>Only the speaker can read these notes&lt;/li>
&lt;li>Press &lt;code>S&lt;/code> key to view&lt;/li>
&lt;/ul>
&lt;/aside>
&lt;hr>
&lt;h2 id="themes">Themes&lt;/h2>
&lt;ul>
&lt;li>black: Black background, white text, blue links (default)&lt;/li>
&lt;li>white: White background, black text, blue links&lt;/li>
&lt;li>league: Gray background, white text, blue links&lt;/li>
&lt;li>beige: Beige background, dark text, brown links&lt;/li>
&lt;li>sky: Blue background, thin dark text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>night: Black background, thick white text, orange links&lt;/li>
&lt;li>serif: Cappuccino background, gray text, brown links&lt;/li>
&lt;li>simple: White background, black text, blue links&lt;/li>
&lt;li>solarized: Cream-colored background, dark green text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;section data-noprocess data-shortcode-slide
data-background-image="/media/boards.jpg"
>
&lt;h2 id="custom-slide">Custom Slide&lt;/h2>
&lt;p>Customize the slide style and background&lt;/p>
&lt;pre>&lt;code class="language-markdown">{{&amp;lt; slide background-image=&amp;quot;/media/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="custom-css-example">Custom CSS Example&lt;/h2>
&lt;p>Let&amp;rsquo;s make headers navy colored.&lt;/p>
&lt;p>Create &lt;code>assets/css/reveal_custom.css&lt;/code> with:&lt;/p>
&lt;pre>&lt;code class="language-css">.reveal section h1,
.reveal section h2,
.reveal section h3 {
color: navy;
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h1 id="questions">Questions?&lt;/h1>
&lt;p>&lt;a href="https://github.com/wowchemy/wowchemy-hugo-modules/discussions" target="_blank" rel="noopener">Ask&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://wowchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">Documentation&lt;/a>&lt;/p></description></item><item><title>External Project</title><link>https://dmolitor.com/project/external-project/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://dmolitor.com/project/external-project/</guid><description/></item><item><title>Internal Project</title><link>https://dmolitor.com/project/internal-project/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://dmolitor.com/project/internal-project/</guid><description>&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p>
&lt;p>Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p>
&lt;p>Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p>
&lt;p>Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p>
&lt;p>Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p></description></item><item><title>An example journal article</title><link>https://dmolitor.com/publication/journal-article/</link><pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate><guid>https://dmolitor.com/publication/journal-article/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Click the &lt;em>Cite&lt;/em> button above to demo the feature to enable visitors to import publication metadata into their reference management software.
&lt;/div>
&lt;/div>
&lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
&lt;p>Supplementary notes can be added here, including &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">code, math, and images&lt;/a>.&lt;/p></description></item><item><title>An example conference paper</title><link>https://dmolitor.com/publication/conference-paper/</link><pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate><guid>https://dmolitor.com/publication/conference-paper/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Click the &lt;em>Cite&lt;/em> button above to demo the feature to enable visitors to import publication metadata into their reference management software.
&lt;/div>
&lt;/div>
&lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
&lt;p>Supplementary notes can be added here, including &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">code, math, and images&lt;/a>.&lt;/p></description></item><item><title/><link>https://dmolitor.com/admin/config.yml</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmolitor.com/admin/config.yml</guid><description/></item></channel></rss>