<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Daniel Molitor</title>
<link>https://dmolitor.com/blog/</link>
<atom:link href="https://dmolitor.com/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Thu, 06 Mar 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Anytime-valid Inference on the AMCE in Conjoint Experiments</title>
  <link>https://dmolitor.com/blog/posts/conjoint_analysis/</link>
  <description><![CDATA[ 




<p>In this post I’ll be exploring an empirical example to demonstrate how we can target the Average Marginal Component Effect (AMCE) and perform a standard, fixed-n analysis, and how we can adopt methods from the anytime-valid literature to perform a sequential analysis of the AMCE.</p>
<p>For background, see <a href="https://www.andrewheiss.com/blog/2023/07/25/conjoint-bayesian-frequentist-guide/">this super-detailed discussion of conjoint analysis</a> and <a href="https://www.andrewheiss.com/blog/2022/05/20/marginalia/">this one on marginal effects</a> by Andrew Heiss.</p>
<section id="candidate-experiment-setup" class="level2">
<h2 class="anchored" data-anchor-id="candidate-experiment-setup">Candidate experiment — setup</h2>
<p>The empirical example we’ll base this analysis on is the candidate experiment in Hainmueller et al.’s <a href="https://doi.org/10.1093/pan/mpt024">Causal Inference in Conjoint Analysis</a> paper. Instead of describing it myself I’ll just include the paper’s description of the experiment:</p>
<blockquote class="blockquote">
<p>The choice between competing candidates for elected office is central to democracy. Candidates typically differ on a variety of dimensions, including their personal background and demographic characteristics, issue positions, and prior experience. The centrality of partisanship to voter decision making is amply documented [ref], so we focus here on the less-examined role of candidates’ personal traits [ref]. Within the United States, there is constant speculation about the role of candidates’ personal backgrounds in generating support or opposition; here, we harness conjoint analysis to examine those claims. <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We focus on eight attributes of would-be presidential candidates, all of which have emerged in recent campaigns. Six of these attributes can take on one of six values, including the candidates’ religion (Catholic, Evangelical Protestant, Mainline Protestant, Mormon, Jewish, or None), college education (no college, state university, community college, Baptist college, Ivy League college, or small college), profession (lawyer, high school teacher, business owner, farmer, doctor, or car dealer), annual income ($32K, $54K, $65K, $92K, $210K, and $5.1M), racial/ethnic background (Hispanic, White, Caucasian, Black, Asian American, and Native American), and age (36, 45, 52, 60, 68, and 75). 3 Two other attributes take on only two values: military service (served or not) and gender (male or female). Each respondent to our online survey—administered through Amazon’s Mechanical Turk [ref]—saw six pairs of profiles that were generated using the fully randomized approach described below. Figure A.1 in the Supplemental Information (SI) illustrates one choice presented to one respondent. The profiles were presented side-by-side, with each pair of profiles on a separate screen. To ease the cognitive burden for respondents while also minimizing primacy and recency effects, the attributes were presented in a randomized order that was fixed across the six pairings for each respondent. <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;On the same screen as each candidate pairing, respondents were asked multiple questions which serve as dependent variables. First, they were asked to choose between the two candidates, a “forced-choice” design that enables us to evaluate the role of each attribute value in the assessment of one profile relative to another. This question closely resembles real-world voter decision making, in which respondents must cast a single ballot between competing candidates who vary on multiple dimensions. In the second and third questions following the profiles, the respondents rated each candidate on a one to seven scale, enabling evaluations of the levels of absolute support or opposition to each profile separately.</p>
</blockquote>
</section>
<section id="candidate-experiment-fixed-n-analysis" class="level2">
<h2 class="anchored" data-anchor-id="candidate-experiment-fixed-n-analysis">Candidate experiment — fixed-n analysis</h2>
<p>The data for the candidate experiment is publically available <a href="https://www.andrewheiss.com/blog/2023/07/25/conjoint-bayesian-frequentist-guide/data/candidate.dta">here</a> or <a href="https://doi.org/10.7910/DVN/THJYQR">here</a>. Let’s begin by loading some necessary packages and the data:</p>
<section id="dependencies-and-data-prep" class="level3">
<h3 class="anchored" data-anchor-id="dependencies-and-data-prep">Dependencies and data prep</h3>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(fixest)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(forcats)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(future)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(future.apply)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gganimate)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggtext)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(haven)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(marginaleffects)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(progressr)</span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(scales)</span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-15"></span>
<span id="cb1-16">candidate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_dta</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/dmolitor/Downloads/candidate.dta"</span>)</span></code></pre></div>
</details>
</div>
<p>Now let’s make the column names be nice and readable.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">variable_lookup <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb2-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>variable,    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>variable_nice,</span>
<span id="cb2-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"atmilitary"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Military"</span>,</span>
<span id="cb2-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"atreligion"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Religion"</span>,</span>
<span id="cb2-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ated"</span>,       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Education"</span>,</span>
<span id="cb2-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"atprof"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Profession"</span>,</span>
<span id="cb2-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"atmale"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gender"</span>,</span>
<span id="cb2-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"atinc"</span>,      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Income"</span>,</span>
<span id="cb2-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"atrace"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Race"</span>,</span>
<span id="cb2-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"atage"</span>,      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span></span>
<span id="cb2-11">)</span>
<span id="cb2-12"></span>
<span id="cb2-13">candidate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_factor</span>(candidate) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">respondent =</span> resID) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename_with</span>(</span>
<span id="cb2-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.cols =</span> atmilitary<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>atmale,</span>
<span id="cb2-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fn =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(</span>
<span id="cb2-18">      x,</span>
<span id="cb2-19">      \(y) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(variable_lookup, variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>variable_nice,</span>
<span id="cb2-20">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-21">    )</span>
<span id="cb2-22">  )</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(candidate)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 3,466
Columns: 11
$ respondent &lt;fct&gt; A2NEN4NSNS2O8S, A2NEN4NSNS2O8S, A2NEN4NSNS2O8S, A2NEN4NSNS2…
$ Military   &lt;fct&gt; Did Not Serve, Served, Did Not Serve, Served, Served, Serve…
$ Religion   &lt;fct&gt; Mormon, None, Catholic, Mainline protestant, None, Mainline…
$ Education  &lt;fct&gt; Community college, No BA, Small college, Small college, Bap…
$ Profession &lt;fct&gt; Car dealer, High school teacher, Farmer, Doctor, Doctor, La…
$ Income     &lt;fct&gt; 5.1M, 65K, 32K, 54K, 5.1M, 54K, 5.1M, 5.1M, 32K, 54K, 32K, …
$ Race       &lt;fct&gt; White, Asian American, Native American, White, Native Ameri…
$ Age        &lt;fct&gt; 75, 60, 68, 75, 45, 52, 52, 75, 75, 60, 45, 45, 45, 60, 36,…
$ Gender     &lt;fct&gt; Female, Male, Female, Male, Female, Male, Male, Female, Fem…
$ selected   &lt;dbl&gt; 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0,…
$ rating     &lt;dbl&gt; 0.3333333, 0.5000000, 0.6666667, 0.6666667, 0.3333333, 0.50…</code></pre>
</div>
</div>
<p>Each row in the dataset represents one candidate profile out of 1,733 candidate comparisons made by 311 survey respondents. Each of the candidate comparisons has 2 candidate profiles to choose between, so the total number of profiles in the data is 3,466 (1,733 x 2). The <code>selected</code> column is a binary outcome indicating whether the survey respondent (identified in the <code>respondent</code> column) selected that profile as the preferred candidate.</p>
</section>
<section id="estimating-fixed-n-amces" class="level3">
<h3 class="anchored" data-anchor-id="estimating-fixed-n-amces">Estimating fixed-n AMCEs</h3>
<p>The first estimand of interest is the AMCE. In potential outcomes notation you can define the AMCE as the average difference in potential outcomes when you change the level of a particular attribute while averaging over the joint distribution of the other attributes. For example, let</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?Y_i(X_j=x_j,X_%7B%E2%88%92j%7D)"> be the potential outcome for respondent <img src="https://latex.codecogs.com/png.latex?i"> given candidate profile <img src="https://latex.codecogs.com/png.latex?X"> when the candidate profile has attribute <img src="https://latex.codecogs.com/png.latex?j"> set to <img src="https://latex.codecogs.com/png.latex?X_j=x_j"> and the other attributes <img src="https://latex.codecogs.com/png.latex?X_%7B-j%7D">​ set to some arbitrary values.</li>
<li><img src="https://latex.codecogs.com/png.latex?X_j%5E*"> be the baseline (or reference) level for attribute <img src="https://latex.codecogs.com/png.latex?j">.</li>
</ul>
<p>Then the AMCE for changing attribute <img src="https://latex.codecogs.com/png.latex?j"> from <img src="https://latex.codecogs.com/png.latex?X_j=X_j%5E*">​ to <img src="https://latex.codecogs.com/png.latex?X_j=x_j">​ can be written as <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BAMCE%7D(X_j)=E_%7BX_%7B%E2%88%92j%7D%7D%5BY_i(X_j=x_j,X_%7B%E2%88%92j%7D)%E2%88%92Y_i(X_j=X_j%5E%E2%88%97,%20X_%7B%E2%88%92j%7D)%5D,"> where expectation <img src="https://latex.codecogs.com/png.latex?E_%7BX_%7B-j%7D%7D">​​ is taken over the joint distribution of the other attributes.</p>
<p>Fortunately, this estimand can be easily estimated with a regression model. Even better, we can simultaneously estimate AMCEs for all attributes by including all attribute variables in our regression model. <strong>Note:</strong> Since survey participants each responded to multiple questions it is essential that we cluster standard errors at the respondent level.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to add the reference level for each of our attributes</span></span>
<span id="cb4-2">add_reference <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">low =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conf.low"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">high =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conf.high"</span>) {</span>
<span id="cb4-3">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contrast"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">into =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contrast"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reference"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" - "</span>)</span>
<span id="cb4-5">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb4-6">    data,</span>
<span id="cb4-7">    data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contrast =</span> reference) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinct</span>(term, contrast, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.keep_all =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(estimate, {{low}}, {{high}}), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb4-11">  )</span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data)</span>
<span id="cb4-13">}</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estimate AMCEs with a logistic regression model</span></span>
<span id="cb4-16">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">feglm</span>(</span>
<span id="cb4-17">  selected <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Military <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Religion <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Education <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Profession <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Income <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Race <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Age</span>
<span id="cb4-18">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Gender,</span>
<span id="cb4-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> candidate,</span>
<span id="cb4-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"binomial"</span>,</span>
<span id="cb4-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cluster =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> respondent</span>
<span id="cb4-22">)</span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the marginal effects (AMCEs) as probabilities</span></span>
<span id="cb4-25">marginal_effects <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avg_slopes</span>(model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)</span>
<span id="cb4-26"></span>
<span id="cb4-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb4-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_reference</span>(marginal_effects),</span>
<span id="cb4-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb4-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> estimate,</span>
<span id="cb4-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> contrast,</span>
<span id="cb4-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> conf.low,</span>
<span id="cb4-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> conf.high,</span>
<span id="cb4-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> term</span>
<span id="cb4-35">  )</span>
<span id="cb4-36">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray70"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-38">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_linerange</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> term, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimated AMCE (percentage points)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-43">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_markdown</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/conjoint_analysis/index_files/figure-html/Fixed-n AMCE estimation-1.png" class="img-fluid figure-img" width="2100"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="estimating-fixed-n-marginal-means" class="level3">
<h3 class="anchored" data-anchor-id="estimating-fixed-n-marginal-means">Estimating fixed-n marginal means</h3>
<p>Another estimand of interest is a purely descriptive quantity—marginal means. The marginal mean for a specific value <img src="https://latex.codecogs.com/png.latex?x_j">​ of some attribute <img src="https://latex.codecogs.com/png.latex?j"> is defined as the average observed outcome for all profiles where that attribute takes on the value <img src="https://latex.codecogs.com/png.latex?X_j%20=%20x_j">​, averaging over the joint distribution of all other attributes. In mathematical notation, this is expressed as <img src="https://latex.codecogs.com/png.latex?%5Cmu(x_j)%20:=%20E%5BY%20%7C%20X_j=x_j%5D,"> where <img src="https://latex.codecogs.com/png.latex?Y"> are the observed outcomes, <img src="https://latex.codecogs.com/png.latex?X_j">​ is the attribute of interest, and the expectation <img src="https://latex.codecogs.com/png.latex?E"> is taken over the distribution of all other attributes <img src="https://latex.codecogs.com/png.latex?X_%7B-j%7D">​. This expression simply calculates the average observed outcome when <img src="https://latex.codecogs.com/png.latex?X_j=x_j">​, without invoking any counterfactual or potential outcomes framework.</p>
<p>We could estimate this non-parametrically just with <code>group_by()</code> and <code>summarize()</code> but we can also get the same result with corresponding CIs using a regression like above.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A function to calculate the marginal mean for a single attribute</span></span>
<span id="cb5-2">marginal_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(model, attribute) {</span>
<span id="cb5-3">  mms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avg_predictions</span>(model, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> attribute)</span>
<span id="cb5-4">  mms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mms <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"level"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {{attribute}}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"term"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {{attribute}})</span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(mms)</span>
<span id="cb5-8">}</span>
<span id="cb5-9"></span>
<span id="cb5-10">marginal_means <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb5-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(</span>
<span id="cb5-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb5-13">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Military"</span>,</span>
<span id="cb5-14">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Religion"</span>,</span>
<span id="cb5-15">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Education"</span>,</span>
<span id="cb5-16">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Profession"</span>,</span>
<span id="cb5-17">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Income"</span>,</span>
<span id="cb5-18">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Race"</span>,</span>
<span id="cb5-19">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>,</span>
<span id="cb5-20">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gender"</span></span>
<span id="cb5-21">    ),</span>
<span id="cb5-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(attribute) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">marginal_mean</span>(model, attribute)</span>
<span id="cb5-23">  )</span>
<span id="cb5-24">)</span>
<span id="cb5-25"></span>
<span id="cb5-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb5-27">  marginal_means,</span>
<span id="cb5-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb5-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> estimate,</span>
<span id="cb5-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> level,</span>
<span id="cb5-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> conf.low,</span>
<span id="cb5-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> conf.high,</span>
<span id="cb5-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> term</span>
<span id="cb5-34">  )</span>
<span id="cb5-35">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-36">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray70"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-38">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_linerange</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> term, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Marginal Means"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-43">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_markdown</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/conjoint_analysis/index_files/figure-html/Fixed-n marginal means-1.png" class="img-fluid figure-img" width="2100"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="candidate-experiment-sequential-analysis" class="level2">
<h2 class="anchored" data-anchor-id="candidate-experiment-sequential-analysis">Candidate experiment — sequential analysis</h2>
<p>All the analysis performed up to this point has been utilizing estimators that are fixed-n valid. In short, this means that they are only valid for a pre-specified <img src="https://latex.codecogs.com/png.latex?N">. We run an experiment, collect <img src="https://latex.codecogs.com/png.latex?N"> samples, and analyze the data. Our estimators give us certain statistical guarantees at this fixed sample size. For example, each of the estimated parameters above has a corresponding 95% confidence interval (CI). In the fixed-n setting, each individual AMCE (or marginal mean) CI has a 95% probability of containing the true parameter value—at least from a frequentist perspective.</p>
<p>As researchers, we may be particularly interested in estimating AMCEs for certain attributes and we may want to ensure that we have sufficient sample size to have sufficient statistical power to detect non-zero AMCEs for those attributes. Typically researchers will utilize power calculations to determine sufficient sample sizes to detect treatment effects of interest prior to running an experiment. However, power calculations rely on unverifiable assumptions which can cause them to be highly inaccurate not to mention difficult to perform, particularly in the context of conjoint experiments.</p>
<p>What we would <strong>love</strong> is to be able to continuously monitor our conjoint experiment as we collect data and watch our AMCE (or marginal means) estimates and their CIs and to stop the experiment as soon as the AMCE for our attribute of interest is statistically significant. Our current estimators for the AMCE are not suitable for this. For a little more detail on why, see my <a href="https://www.dmolitor.com/blog/posts/anytime_valid_linear_models/">simulations on anytime-valid linear models</a>. In short, if we repeatedly calculate our AMCE estimates and 95% CIs and collect more data until they are statistically significant, our probability of committing a Type 1 error will massively increase and will converge to 1 the more often we do this.</p>
<p>However, there is a solution to this! The blog post above details methods for estimating linear regression coefficients that allow us to do exactly this while keeping the probability of committing a Type 1 error below our nominal significance level (e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%200.05">). We refer to this as anytime-valid inference on our regression coefficients. In particular, the methods above develop anytime-valid p-values and confidence sequences (anytime-valid corollary to CIs) for linear regression coefficients.</p>
<section id="estimating-anytime-valid-p-values-and-confidence-sequences" class="level3">
<h3 class="anchored" data-anchor-id="estimating-anytime-valid-p-values-and-confidence-sequences">Estimating anytime-valid p-values and confidence sequences</h3>
<p>The wonderful thing about these anytime-valid p-values and CSs is that they can be easily estimated directly from standard regression outputs, e.g.&nbsp;from <code>lm()</code> in R. Below I will quickly demonstrate how we can adapt the code from above for estimating AMCES to output anytime-valid CSs and p-values instead of the usual fixed-n CIs and p-values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Same code as before</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estimate AMCEs with a logistic regression model</span></span>
<span id="cb6-4">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">feglm</span>(</span>
<span id="cb6-5">  selected <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Military <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Religion <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Education <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Profession <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Income <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Race <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Age</span>
<span id="cb6-6">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Gender,</span>
<span id="cb6-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> candidate,</span>
<span id="cb6-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"binomial"</span>,</span>
<span id="cb6-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cluster =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> respondent</span>
<span id="cb6-10">)</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the marginal effects (AMCEs) as probabilities</span></span>
<span id="cb6-13">marginal_effects <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avg_slopes</span>(model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)</span>
<span id="cb6-14"></span>
<span id="cb6-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Calculate anytime-valid p-values and CSs</span></span>
<span id="cb6-16"></span>
<span id="cb6-17">marginal_effects_sequential <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sequential_f_cs</span>(</span>
<span id="cb6-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> marginal_effects<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>estimate,</span>
<span id="cb6-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> marginal_effects<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>std.error,</span>
<span id="cb6-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nobs,</span>
<span id="cb6-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_params =</span> model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nparams,</span>
<span id="cb6-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_vcov</span>(marginal_effects)),</span>
<span id="cb6-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">term =</span> marginal_effects<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>term,</span>
<span id="cb6-24">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contrast =</span> marginal_effects<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>contrast</span>
<span id="cb6-25">)</span></code></pre></div>
</div>
<p>Check the full code for calculating the anytime-valid values <a href="https://github.com/dmolitor/dmolitor.github.io/blob/main/blog/posts/conjoint_analysis/utils.R">here</a>.</p>
<p>From now on, we will take these methods for granted and will simply show how to apply them to our data so that we can continuously monitor our conjoint experiment and stop it once our estimates of interest are statistically significant!</p>
</section>
<section id="estimating-sequential-amces" class="level3">
<h3 class="anchored" data-anchor-id="estimating-sequential-amces">Estimating sequential AMCEs</h3>
<!-- For all following code we will focus on a couple attributes of interest; military
service and religion. We will simulate a dynamic experiment where we are running
the conjoint and collecting data in real time. Using our anytime-valid linear
regression estimates, we can estimate and plot our AMCEs and 95% confidence
sequences (anytime-valid corollary to CIs) as often as we want while controlling
the probability of committing a Type 1 error.

We will iterate through our conjoint in batches of 70 survey responses
and we will estimate our AMCES and confidence sequences (CSs) after each batch.
We will observe how our AMCE estimates change over time and how we can monitor statistical
significance (and even choose to stop the conjoint early) based on this!


::: {.cell}

```{.r .cell-code}
# Sample a random row from a dataframe;
# Return the row and the dataframe minus the row
sample_rows <- function(data, size = 1) {
  idx <- sample(1:nrow(data), size = size)
  row <- data[idx, , drop = FALSE]
  data <- data[-idx, , drop = FALSE]
  list("rows" = row, "data" = data)
}

chunk_size <- 99
candidate_sim <- candidate
sim_data <- tibble()
sim_estimates <- tibble()

for (i in seq(100, nrow(candidate_sim), by = chunk_size)) {
  # Randomly sample a set of survey responses
  sim_data <- bind_rows(
    sim_data,
    sample_rows(candidate_sim, size = chunk_size)$rows
  )
  # Estimate our model
  sim_model <- feglm(
    selected ~ Military + Religion + Education + Profession + Income + Race + Age
        + Gender,
    data = sim_data,
    family = "binomial",
    cluster = ~ respondent
  )
  # Calculate marginal effects
  marginal_eff_sim <- avg_slopes(sim_model, newdata = "mean")
  # Calculate sequential p-values and CSs
  marginal_eff_sim_seq <- sequential_f_cs(
    delta = marginal_eff_sim$estimate,
    se = marginal_eff_sim$std.error,
    n = sim_model$nobs,
    n_params = sim_model$nparams,
    Z = solve(get_vcov(marginal_eff_sim)),
    term = marginal_eff_sim$term,
    contrast = marginal_eff_sim$contrast
  ) |>
    add_reference(low = "cs_lower", high = "cs_upper") |>
    filter(term %in% c("Military", "Profession")) |>
    mutate(iter = floor(i/chunk_size))
  # Append data
  sim_estimates <- bind_rows(sim_estimates, marginal_eff_sim_seq)
}

# Plot the CSs over time
plot_anim <- ggplot(
  sim_estimates,
    aes(
      x = estimate,
      y = contrast,
      xmin = cs_lower,
      xmax = cs_upper,
      color = term
    )
  ) +
  geom_vline(xintercept = 0, color = "gray70") +
  geom_point() +
  geom_linerange() +
  facet_wrap(~ term, ncol = 1, scales = "free_y", drop = TRUE) +
  scale_x_continuous(labels = label_percent()) +
  coord_cartesian(xlim = c(-.5, .5)) +
  labs(x = "Estimated AMCE (percentage points)", y = "") +
  theme_minimal() +
  theme(axis.text.y = element_markdown(), legend.position = "none") +
  transition_states(
    iter,
    transition_length = 1,
    state_length = 1
  )

# Turn this into a video
animation <- animate(
  plot_anim,
  renderer = av_renderer(),
  height = 4,
  width = 4,
  units = "in",
  res = 200
)
```
:::

::: {.cell}

:::



<div style="text-align: center;">
  <video controls style="width: 60%;">
    <source src="./anytime_valid_cs.mp4" type="video/mp4">
    Your browser does not support the video tag.
  </video>
</div>

We can watch through the duration of our simulated conjoint as the precision of
our estimates increases and some of them are estimated as statistically significant.

### Simulations -->
<p>First, let’s chalk up a function that will simulate a random respondent for a conjoint experiment with specified AMCEs. Then we’ll simulate a conjoint experiment with a binary outcome (selected or not selected) and two attributes. Attribute 1 has 3 levels and Attribute 2 has 5 levels. The true AMCEs for each attribute and attribute level are as follows:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Attribute</th>
<th>Level</th>
<th>True AMCE</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>2</td>
<td>0.2</td>
</tr>
<tr class="even">
<td>1</td>
<td>3</td>
<td>0.1</td>
</tr>
<tr class="odd">
<td>2</td>
<td>2</td>
<td>-0.1</td>
</tr>
<tr class="even">
<td>2</td>
<td>3</td>
<td>0.15</td>
</tr>
<tr class="odd">
<td>2</td>
<td>4</td>
<td>0.3</td>
</tr>
<tr class="even">
<td>2</td>
<td>5</td>
<td>-0.2</td>
</tr>
</tbody>
</table>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to simulate a random survey participant</span></span>
<span id="cb7-2">simulate_profile <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(amce_attr1, amce_attr2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intercept =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) {</span>
<span id="cb7-3">  attr1_levels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 1"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(amce_attr1))</span>
<span id="cb7-4">  attr2_levels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 1"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(amce_attr2))</span>
<span id="cb7-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Randomly sample a level for each attribute (uniformly)</span></span>
<span id="cb7-6">  attr1_val <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(attr1_levels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-7">  attr2_val <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(attr2_levels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine the effect for attribute 1: baseline gets effect 0</span></span>
<span id="cb7-9">  effect1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (attr1_val <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 1"</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> amce_attr1[attr1_val]</span>
<span id="cb7-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine the effect for attribute 2: baseline gets effect 0</span></span>
<span id="cb7-11">  effect2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (attr2_val <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 1"</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> amce_attr2[attr2_val]</span>
<span id="cb7-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the latent probability p</span></span>
<span id="cb7-13">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> intercept <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> effect1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> effect2</span>
<span id="cb7-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure that p is within [0, 1]</span></span>
<span id="cb7-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate the binary outcome using p as the success probability.</span></span>
<span id="cb7-17">  outcome <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p)</span>
<span id="cb7-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb7-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">attr1 =</span> attr1_val,</span>
<span id="cb7-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">attr2 =</span> attr2_val,</span>
<span id="cb7-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outcome =</span> outcome,</span>
<span id="cb7-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p =</span> p</span>
<span id="cb7-23">  ))</span>
<span id="cb7-24">}</span>
<span id="cb7-25"></span>
<span id="cb7-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify the attribute-level AMCEs for attribute 1 &amp; 2</span></span>
<span id="cb7-27">amce_attr1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 2"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 3"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb7-28">amce_attr2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 2"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 3"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 4"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 5"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span></code></pre></div>
</details>
</div>
<p>Next, let’s simulate running our conjoint experiment online and estimating our AMCEs in an online fashion. We’ll first simulate 100 survey participants and then we will estimate our AMCEs for every additional participant for a total sample of <img src="https://latex.codecogs.com/png.latex?N%20=%201000">.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "Gather" 100 survey responses before estimating</span></span>
<span id="cb8-2">sim_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, \(i) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate_profile</span>(amce_attr1, amce_attr2, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)))</span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize tibble to collect our AMCE estimates</span></span>
<span id="cb8-4">sim_estimates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>()</span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate a sequential conjoint with total N=1000</span></span>
<span id="cb8-7">pb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">txtProgressBar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb8-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) {</span>
<span id="cb8-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Randomly simulate a survey participant</span></span>
<span id="cb8-10">  sim_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb8-11">    sim_data,</span>
<span id="cb8-12">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate_profile</span>(amce_attr1, amce_attr2, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb8-13">  )</span>
<span id="cb8-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estimate our model</span></span>
<span id="cb8-15">  sim_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">feglm</span>(</span>
<span id="cb8-16">    outcome <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> attr1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> attr2,</span>
<span id="cb8-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sim_data,</span>
<span id="cb8-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"binomial"</span></span>
<span id="cb8-19">  )</span>
<span id="cb8-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate marginal effects</span></span>
<span id="cb8-21">  marginal_eff_sim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avg_slopes</span>(sim_model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)</span>
<span id="cb8-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate sequential p-values and CSs</span></span>
<span id="cb8-23">  marginal_eff_sim_seq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sequential_f_cs</span>(</span>
<span id="cb8-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> marginal_eff_sim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>estimate,</span>
<span id="cb8-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> marginal_eff_sim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>std.error,</span>
<span id="cb8-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> sim_model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nobs,</span>
<span id="cb8-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_params =</span> sim_model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nparams,</span>
<span id="cb8-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_vcov</span>(marginal_eff_sim)),</span>
<span id="cb8-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">term =</span> marginal_eff_sim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>term,</span>
<span id="cb8-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contrast =</span> marginal_eff_sim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>contrast</span>
<span id="cb8-31">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_reference</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">low =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cs_lower"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">high =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cs_upper"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter =</span> i)</span>
<span id="cb8-34">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append data</span></span>
<span id="cb8-35">  sim_estimates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(sim_estimates, marginal_eff_sim_seq)</span>
<span id="cb8-36">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setTxtProgressBar</span>(pb, i)</span>
<span id="cb8-37">}</span>
<span id="cb8-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">close</span>(pb)</span></code></pre></div>
</details>
</div>
<p>Now, let’s plot the progression of the AMCE estimates over time.</p>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">truth <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb9-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>term, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>contrast, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>estimate,</span>
<span id="cb9-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attr1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 2"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb9-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attr1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 3"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb9-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attr2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 2"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb9-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attr2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 3"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>,</span>
<span id="cb9-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attr2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 4"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb9-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attr2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Level 5"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb9-9">)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the CSs over time</span></span>
<span id="cb9-12">plot_anim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb9-13">  sim_estimates,</span>
<span id="cb9-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb9-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> estimate,</span>
<span id="cb9-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> contrast,</span>
<span id="cb9-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> cs_lower,</span>
<span id="cb9-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> cs_upper,</span>
<span id="cb9-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> term</span>
<span id="cb9-20">    )</span>
<span id="cb9-21">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> truth, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> estimate, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> contrast), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray70"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_linerange</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> term, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimated AMCE (percentage points)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_markdown</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transition_states</span>(</span>
<span id="cb9-33">    iter,</span>
<span id="cb9-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">transition_length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb9-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">state_length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-36">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ease_aes</span>()</span>
<span id="cb9-38"></span>
<span id="cb9-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn this into a video</span></span>
<span id="cb9-40">animation <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">animate</span>(</span>
<span id="cb9-41">  plot_anim,</span>
<span id="cb9-42">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">renderer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">av_renderer</span>(),</span>
<span id="cb9-43">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nframes =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>,</span>
<span id="cb9-44">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb9-45">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb9-46">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>,</span>
<span id="cb9-47">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">res =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb9-48">)</span></code></pre></div>
</details>
</div>
<div style="text-align: center;">
<p><video controls="" style="width: 60%;"> <source src="./anytime_valid_sim.mp4" type="video/mp4"> Your browser does not support the video tag. </video></p>
</div>
<p>We can watch as our estimates and CSs converge towards the truth over time, providing valid coverage despite estimating AMCEs and corresponding p-values and CSs at each step!</p>


</section>
</section>

 ]]></description>
  <category>Conjoints</category>
  <category>Anytime-valid Inference</category>
  <guid>https://dmolitor.com/blog/posts/conjoint_analysis/</guid>
  <pubDate>Thu, 06 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://dmolitor.com/blog/posts/conjoint_analysis/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Anytime-Valid Regression Adjusted Causal Inference</title>
  <link>https://dmolitor.com/blog/posts/anytime_valid_linear_models/</link>
  <description><![CDATA[ 




<p>Randomized experiments (A/B tests) are ubiquitous in both academia and the tech sector. They enable robust causal inference regarding the impact of interventions on user or participant outcomes. Under randomization, various estimators provide valid estimates of the average treatment effect (ATE), defined as <img src="https://latex.codecogs.com/png.latex?%5Ctau%20=%20E%5BY_i(1)%20-%20Y_i(0)%5D."> These estimators typically yield both point estimates and confidence intervals (CIs) such that <img src="https://latex.codecogs.com/png.latex?P(%5Ctau%20%5Cin%20%5Ctext%7BCI%7D)%20%3C=%20%5Calpha,"> where <img src="https://latex.codecogs.com/png.latex?%5Calpha"> is the significance level and <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCI%7D"> is a random interval constructed from our data.</p>
<p>One major issue with common estimators like ordinary least squares (OLS) is that the statistical guarantees for their confidence intervals only hold for a pre-specified sample size <img src="https://latex.codecogs.com/png.latex?N">. A surprisingly common practice is to collect some data, estimate <img src="https://latex.codecogs.com/png.latex?%5Ctau"> and its corresponding 95% CI, and then, if the effect is large but not statistically significant, collect more data and re-estimate <img src="https://latex.codecogs.com/png.latex?%5Ctau">. This process of “data-peeking” may be repeated multiple times. However, such practices violate the statistical guarantees of standard confidence intervals, causing the probability of a Type I error to far exceed the nominal significance level <img src="https://latex.codecogs.com/png.latex?%5Calpha">.</p>
<p>To address this issue, researchers at Netflix have developed anytime-valid Confidence Sequences (CSs) for linear regression parameters. These CSs have the property that <img src="https://latex.codecogs.com/png.latex?P(%5Cforall%20n,%20%5Cdelta%20%5Cin%20%5Ctext%7BCS%7D_%7B%5Cdelta,%20n%7D)%20%5Cgeq%201%20-%20%5Calpha,"> where <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> represents the regression parameter. Essentially, this means that you can estimate the parameter and update the CS as often as you like, and the probability of committing a Type I error will always remain below <img src="https://latex.codecogs.com/png.latex?%5Calpha">.</p>
<p>This method is not only practically significant but also easy to implement using standard linear regression outputs in R. The simulations that follow will demonstrate the usefulness of this approach.</p>
<section id="simulate-rct" class="level2">
<h2 class="anchored" data-anchor-id="simulate-rct">Simulate RCT</h2>
<p>These simulations will rely on the following packages:</p>
<section id="dependencies" class="level3">
<h3 class="anchored" data-anchor-id="dependencies">Dependencies</h3>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span></code></pre></div>
</details>
</div>
</section>
<section id="data-generation-and-helper-functions" class="level3">
<h3 class="anchored" data-anchor-id="data-generation-and-helper-functions">Data generation and helper functions</h3>
<p>We simulate a simple randomized controlled trial (RCT) where binary treatment is assigned randomly. The potential outcomes are defined by <img src="https://latex.codecogs.com/png.latex?Y_i(W_i)%20=%200.5%20+%200.5*W_i%20+%202*X_%7Bi1%7D%20+%201.2*X_%7Bi2%7D%20+%200.4*X_%7Bi3%7D%20+%20%5Cepsilon_i"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?W_i">​ indicates the treatment status of unit <img src="https://latex.codecogs.com/png.latex?i">, the true average treatment effect (ATE) is <img src="https://latex.codecogs.com/png.latex?%5Ctau%20=%200.5">, and <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_i%20%5Csim%20%5Ctext%7BNormal%7D(0,%201)">.</p>
<p>In this setting, a simple regression of <img src="https://latex.codecogs.com/png.latex?Y_i">​ on an intercept and <img src="https://latex.codecogs.com/png.latex?W_i">​, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?Y_i%20%5Csim%20%5Calpha%20+%20%5Ctau%20*%20W_i">​, is equivalent to the difference-in-means estimator and produces an unbiased estimate <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BDM%7D"> of <img src="https://latex.codecogs.com/png.latex?%5Ctau">. Similarly, a covariate-adjusted regression, given by <img src="https://latex.codecogs.com/png.latex?Y_i%20%5Csim%20%5Calpha%20+%20%5Ctau%20*%20W_i%20+%20%5Cbeta%5ET*X_i">, also provides an unbiased estimate <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BCA%7D">, but with lower variance than <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BDM%7D">.</p>
<p>First, we define a function to simulate a random tuple <img src="https://latex.codecogs.com/png.latex?(X_i,%20W_i,%20Y_i)"> according to the RCT setup described above:</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">draw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(arm, ate, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>) {</span>
<span id="cb2-2">  covar_coef <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span>
<span id="cb2-3">  covar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>))</span>
<span id="cb2-4">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>arm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop</span>(covar_coef <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> covar) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma)</span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> arm), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(covar)))</span>
<span id="cb2-6">}</span></code></pre></div>
</details>
</div>
<p>Next, for a dataset comprising these units <img src="https://latex.codecogs.com/png.latex?%5C%7B(X_i,%20W_i,%20Y_i)%5C%7D_%7Bi=1%7D%5EN">​, we construct a function to estimate both <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BDM%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BCA%7D">​, along with their corresponding exact and asymptotic confidence sequences (CSs):</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">compare <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(model_ca, model_dm, data, iter, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ate =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) {</span>
<span id="cb3-2">  seq_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sequential_f_cs</span>(model_ca, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">phi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-3">  seq_f_dm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sequential_f_cs</span>(model_dm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">phi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-4">  seq_asymp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ate_cs_asymp</span>(model_ca, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">treat_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-5">  seq_asymp_dm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ate_cs_asymp</span>(</span>
<span id="cb3-6">    model_dm,</span>
<span id="cb3-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb3-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">treat_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span></span>
<span id="cb3-9">  )</span>
<span id="cb3-10">  comparison_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb3-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> iter,</span>
<span id="cb3-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb3-13">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f_test"</span>,</span>
<span id="cb3-14">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f_test_unadj"</span>,</span>
<span id="cb3-15">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"asymp"</span>,</span>
<span id="cb3-16">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"asymp_unadj"</span></span>
<span id="cb3-17">    ),</span>
<span id="cb3-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"estimate"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb3-19">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(seq_f, covariate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>estimate,</span>
<span id="cb3-20">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(seq_f_dm, covariate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>estimate,</span>
<span id="cb3-21">      seq_asymp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>estimate,</span>
<span id="cb3-22">      seq_asymp_dm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>estimate</span>
<span id="cb3-23">    ),</span>
<span id="cb3-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lower"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb3-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(seq_f, covariate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cs_lower,</span>
<span id="cb3-26">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(seq_f_dm, covariate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cs_lower,</span>
<span id="cb3-27">      seq_asymp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cs_lower,</span>
<span id="cb3-28">      seq_asymp_dm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cs_lower</span>
<span id="cb3-29">    ),</span>
<span id="cb3-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb3-31">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(seq_f, covariate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cs_upper,</span>
<span id="cb3-32">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(seq_f_dm, covariate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cs_upper,</span>
<span id="cb3-33">      seq_asymp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cs_upper,</span>
<span id="cb3-34">      seq_asymp_dm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cs_upper</span>
<span id="cb3-35">    )</span>
<span id="cb3-36">  )</span>
<span id="cb3-37">  comparison_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>covered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (</span>
<span id="cb3-38">    comparison_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lower <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> ate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> ate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> comparison_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>upper</span>
<span id="cb3-39">  )</span>
<span id="cb3-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(comparison_df)</span>
<span id="cb3-41">}</span></code></pre></div>
</details>
</div>
<p>Finally, we create a function that simulates an experiment of size <img src="https://latex.codecogs.com/png.latex?N"> where each tuple <img src="https://latex.codecogs.com/png.latex?(X_i,%20W_i,%20Y_i)"> is received sequentially. At each sample size <img src="https://latex.codecogs.com/png.latex?n%20%5Cleq%20N">, we re-estimate <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BDM%7D">, <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BCA%7D">​, and their CSs:</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">simulate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(model_ca_fn, model_dm_fn, draw_fn, n, ate) {</span>
<span id="cb4-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Warm-start with 20 observations so that no regression coefs are NA</span></span>
<span id="cb4-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># at any point</span></span>
<span id="cb4-4">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw_fn</span>(ate)))</span>
<span id="cb4-5">  estimates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>()</span>
<span id="cb4-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb4-7">    observation <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw_fn</span>(ate)</span>
<span id="cb4-8">    df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df, observation)</span>
<span id="cb4-9">    model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model_ca_fn</span>(df)</span>
<span id="cb4-10">    model_dm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model_dm_fn</span>(df)</span>
<span id="cb4-11">    estimates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(</span>
<span id="cb4-12">      estimates,</span>
<span id="cb4-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(model, model_dm, df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter =</span> i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ate =</span> ate)</span>
<span id="cb4-14">    )</span>
<span id="cb4-15">  }</span>
<span id="cb4-16">  estimates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> estimates <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb4-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat_sig =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> lower <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> upper,</span>
<span id="cb4-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb4-20">        method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"asymp"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sequential asymptotic CS"</span>,</span>
<span id="cb4-21">        method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"asymp_unadj"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sequential asymptotic CS w/o covariates"</span>,</span>
<span id="cb4-22">        method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f_test"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sequential CS"</span>,</span>
<span id="cb4-23">        method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f_test_unadj"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sequential CS w/o covariates"</span>,</span>
<span id="cb4-24">        method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fixed-N CS"</span>,</span>
<span id="cb4-25">        method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm_unadj"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fixed-N CS w/o covariates"</span></span>
<span id="cb4-26">      )</span>
<span id="cb4-27">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(method) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">transition =</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lag</span>(stat_sig, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> stat_sig) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb4-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat_sig_i_min =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(</span>
<span id="cb4-32">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(stat_sig <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lag</span>(stat_sig, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)),</span>
<span id="cb4-33">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(i[stat_sig <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lag</span>(stat_sig, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)]),</span>
<span id="cb4-34">        <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_integer_</span></span>
<span id="cb4-35">      ),</span>
<span id="cb4-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat_sig_i_max =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(</span>
<span id="cb4-37">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(transition),</span>
<span id="cb4-38">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(i[transition]),</span>
<span id="cb4-39">        <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_integer_</span></span>
<span id="cb4-40">      )  </span>
<span id="cb4-41">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-42">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb4-43">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(estimates)</span>
<span id="cb4-44">}</span></code></pre></div>
</details>
</div>
</section>
<section id="run-the-simulation" class="level3">
<h3 class="anchored" data-anchor-id="run-the-simulation">Run the simulation</h3>
<p>We then run our simulation for <img src="https://latex.codecogs.com/png.latex?N%20=%20500"> and plot the estimates <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BDM%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BCA%7D">​ along with their CSs at each step. The red dotted line is the true value of <img src="https://latex.codecogs.com/png.latex?%5Ctau"> and the vertical blue line indicates the sample size when the corresponding estimator becomes statistically significant.</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">estimates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model_ca_fn =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., data),</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model_dm_fn =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> t, data),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw_fn =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(ate) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ate =</span> ate),</span>
<span id="cb5-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb5-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ate =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb5-7">)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(estimates, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> estimate, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> lower, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> upper)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_ribbon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> stat_sig_i_max), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(</span>
<span id="cb5-15">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> method,</span>
<span id="cb5-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb5-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>,</span>
<span id="cb5-18">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ATE"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/anytime_valid_linear_models/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="2100"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="simulate-non-fixed-probability-randomized-data-but-known-propensity-scores" class="level2">
<h2 class="anchored" data-anchor-id="simulate-non-fixed-probability-randomized-data-but-known-propensity-scores">Simulate non-fixed-probability randomized data (but known propensity scores)</h2>
<p>Next, we simulate a randomized experiment where propensity scores are generated as a known function of covariates. Specifically, the propensity score for unit <img src="https://latex.codecogs.com/png.latex?i"> is given by <img src="https://latex.codecogs.com/png.latex?e_i%20=%200.05%20+%200.5*Z_%7Bi1%7D%20+%200.3*Z_%7Bi2%7D%20+%200.1*Z_%7Bi3%7D,">​ where <img src="https://latex.codecogs.com/png.latex?%5C%7BZ_%7Bi1%7D,%20Z_%7Bi2%7D,%20Z_%7Bi3%7D%5C%7D"> are binary covariates. The potential outcomes are defined as <img src="https://latex.codecogs.com/png.latex?Y_i(W_i)%20=%200.5%20+%200.5*W_i%20+%203*X_%7Bi1%7D%20+%203*X_%7Bi2%7D%20+%201*X_%7Bi3%7D%20+%200.5*Z_%7Bi1%7D%20+%200.3*Z_%7Bi2%7D%20+%200.1*Z_%7Bi3%7D%20+%20%5Cepsilon_i,"> with <img src="https://latex.codecogs.com/png.latex?W_i">​ representing the treatment status, the true average treatment effect (ATE) <img src="https://latex.codecogs.com/png.latex?%5Ctau%20=%200.5">, and <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_i%20%5Csim%20%5Ctext%7BNormal%7D(0,%201)">. In this setup, a simple regression of <img src="https://latex.codecogs.com/png.latex?Y_i">​ on an intercept and <img src="https://latex.codecogs.com/png.latex?W_i">, weighted by the inverse propensity scores <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7Be_i%7D">, yields an unbiased estimate <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BIPW%7D">​ of <img src="https://latex.codecogs.com/png.latex?%5Ctau">. Similarly, the covariate-adjusted regression <img src="https://latex.codecogs.com/png.latex?Y_i%20%5Csim%20%5Calpha%20+%20%5Ctau%20*%20W_i%20+%20%5Cbeta%5ET*X_i">, when weighted by the inverse propensity scores, produces an unbiased estimate <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BCAIPW%7D"> that typically has lower variance.</p>
<p>We then create a function to generate data based on this experimental setup and run our simulation for <img src="https://latex.codecogs.com/png.latex?N%20=%202000">. As before, we plot <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BIPW%7D">, <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Ctau%7D_%7BCAIPW%7D"> and their corresponding confidence sequences (CSs) at each step.</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">draw_prop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ate =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>) {</span>
<span id="cb6-2">  prop_covar_coef <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb6-3">  prop_covar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>))</span>
<span id="cb6-4">  prop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop</span>(prop_covar_coef <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> prop_covar) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb6-5">  covar_coef <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-6">  covar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>))</span>
<span id="cb6-7">  arm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, prop)</span>
<span id="cb6-8">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (</span>
<span id="cb6-9">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb6-10">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>arm</span>
<span id="cb6-11">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop</span>(covar_coef <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> covar)</span>
<span id="cb6-12">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop</span>(prop_covar_coef <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> prop_covar)</span>
<span id="cb6-13">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma)</span>
<span id="cb6-14">  )</span>
<span id="cb6-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> arm, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(arm, prop, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prop)), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(covar)))</span>
<span id="cb6-16">}</span>
<span id="cb6-17"></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulation estimates</span></span>
<span id="cb6-19">estimates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate</span>(</span>
<span id="cb6-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p),</span>
<span id="cb6-21">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> t, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p),</span>
<span id="cb6-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw_fn =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(ate) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw_prop</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ate =</span> ate),</span>
<span id="cb6-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb6-24">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ate =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb6-25">)</span>
<span id="cb6-26"></span>
<span id="cb6-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb6-28">  estimates,</span>
<span id="cb6-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> estimate, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> lower, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> upper)</span>
<span id="cb6-30">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_ribbon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> stat_sig_i_max), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(</span>
<span id="cb6-36">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> method,</span>
<span id="cb6-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb6-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>,</span>
<span id="cb6-39">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ATE"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/anytime_valid_linear_models/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="2100"></p>
</figure>
</div>
</div>
</div>
<p>As expected, including covariates significantly improves the precision of our ATE estimates.</p>
</section>
<section id="type-1-error-control" class="level2">
<h2 class="anchored" data-anchor-id="type-1-error-control">Type 1 error control</h2>
<p>Finally, we assess the empirical Type I error control by running multiple simulations under the null hypothesis (i.e., with <img src="https://latex.codecogs.com/png.latex?%5Ctau%20=%200">). For each simulation, we record whether a Type 1 error is ever committed; that is, whether the CS ever fails to cover <img src="https://latex.codecogs.com/png.latex?%5Ctau">. The overall empirical Type I error is then the fraction of simulations in which the CS commits a Type I error. This global guarantee is analogous to the property of a standard CI: before data is observed, we know that the probability of a Type I error is <img src="https://latex.codecogs.com/png.latex?%5Cleq%20%5Calpha">.</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">estimates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(</span>
<span id="cb7-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb7-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(index) {</span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate</span>(</span>
<span id="cb7-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model_ca_fn =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., data),</span>
<span id="cb7-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model_dm_fn =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> t, data),</span>
<span id="cb7-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw_fn =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(ate) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ate =</span> ate),</span>
<span id="cb7-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb7-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ate =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-10">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sim_i =</span> index)</span>
<span id="cb7-12">  }</span>
<span id="cb7-13">)</span>
<span id="cb7-14"></span>
<span id="cb7-15">error_rate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> estimates <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(sim_i, method) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">any_error =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(covered)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Method =</span> method) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Type 1 error</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(any_error))</span>
<span id="cb7-22"></span>
<span id="cb7-23">error_rate</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
  Method                                  `Type 1 error`
  &lt;chr&gt;                                            &lt;dbl&gt;
1 Sequential CS                                     0.04
2 Sequential CS w/o covariates                      0.04
3 Sequential asymptotic CS                          0.04
4 Sequential asymptotic CS w/o covariates           0.03</code></pre>
</div>
</div>
<p>We see that, indeed, Type 1 error is <img src="https://latex.codecogs.com/png.latex?%5Cleq%20%5Calpha%20=%200.05"> for all estimators.</p>
<section id="credits" class="level3">
<h3 class="anchored" data-anchor-id="credits">Credits</h3>
<p>A lot of the code for this was based on the paper’s <a href="https://github.com/michaellindon/avlm">official repository</a> and was crafted in tandem with my trusty AI assistant (ChatGPT).</p>


</section>
</section>

 ]]></description>
  <category>Anytime-valid Inference</category>
  <guid>https://dmolitor.com/blog/posts/anytime_valid_linear_models/</guid>
  <pubDate>Fri, 21 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://dmolitor.com/blog/posts/anytime_valid_linear_models/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Robust Adaptive Experiments</title>
  <link>https://dmolitor.com/blog/posts/robust_adaptive_exp/</link>
  <description><![CDATA[ 




<p>Recently I’ve been thinking about how to design adaptive experiments that enable valid inference on treatment effects while maintaining sufficient power to detect nonzero effects across treatment arms (including sub-optimal arms). To explore this, I will run simulations demonstrating how we can achieve these goals. Specifically, I extend the Mixture Adaptive Design (MAD) <a href="https://arxiv.org/abs/2311.05794">(Liang &amp; Bojinov, 2024)</a> to produce an adaptive experiment with the following properties:</p>
<ul>
<li><strong>Anytime-valid inference on the ATE</strong>, allowing experiments to stop upon reaching statistical significance.</li>
<li><strong>Dynamic sample allocation</strong>, ensuring all treatment arms receive enough samples for adequate power.</li>
<li><strong>Efficiency gains via bandit design</strong>, balancing statistical power with bandit objectives (e.g., reward maximization).</li>
</ul>
<section id="dependencies" class="level3">
<h3 class="anchored" data-anchor-id="dependencies">Dependencies</h3>
<div id="776e451b" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotnine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pn</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> t</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.bandit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TSBernoulli</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.mad <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MAD, MADModified</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> last</span></code></pre></div>
</details>
</div>
</section>
<section id="introducing-the-mad" class="level2">
<h2 class="anchored" data-anchor-id="introducing-the-mad">Introducing the MAD</h2>
<p>The MAD combines Bernoulli randomization with arbitrary multi-armed bandit (MAB) algorithms, enabling unbiased ATE estimation with anytime-valid confidence sequences (CSs).</p>
<p>To illustrate its usefulness, consider a simple experiment with one control and one treatment arm. Outcomes are sampled as follows:</p>
<ul>
<li>Control arm: Y ∼ Bernoulli(<img src="https://latex.codecogs.com/png.latex?%5Ctheta">=0.5)</li>
<li>Treatment arm: Y∼Bernoulli(<img src="https://latex.codecogs.com/png.latex?%5Ctheta">=0.6)</li>
<li>True ATE: 0.1</li>
</ul>
<p>We use Thompson Sampling (TS) as the bandit algorithm and stop the experiment as soon as the ATE reaches statistical significance.</p>
<div id="c76b9371" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reward_fn(arm: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb2-4">    values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-5">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: generator.binomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb2-6">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: generator.binomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ATE = 0.1</span></span>
<span id="cb2-7">    }</span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> values[arm]</span>
<span id="cb2-9"></span>
<span id="cb2-10">exp_simple <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MAD(</span>
<span id="cb2-11">    bandit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TSBernoulli(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, reward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>reward_fn),</span>
<span id="cb2-12">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb2-13">    delta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.24</span>),</span>
<span id="cb2-14">    t_star<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30e3</span>)</span>
<span id="cb2-15">)</span>
<span id="cb2-16">exp_simple.fit(cs_precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</details>
</div>
<p>Finally, we plot the MAD-estimated ATE over time, showing convergence to the true effect and demonstrating that the corresponding 95% CSs maintain valid coverage.</p>
<div id="1bb577ad" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">(</span>
<span id="cb3-2">    exp_simple.plot_ate_path()</span>
<span id="cb3-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.coord_cartesian(ylim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>))</span>
<span id="cb3-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_hline(</span>
<span id="cb3-5">        mapping<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.aes(yintercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ate"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor(arm)"</span>),</span>
<span id="cb3-6">        data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arm"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ate"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>]}),</span>
<span id="cb3-7">        linetype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span></span>
<span id="cb3-8">    )</span>
<span id="cb3-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.theme(strip_text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.element_blank()) </span>
<span id="cb3-10">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/robust_adaptive_exp/index_files/figure-html/cell-5-output-1.png" width="750" height="300" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="bandit-benefits" class="level3">
<h3 class="anchored" data-anchor-id="bandit-benefits">Bandit benefits</h3>
<p>The underlying bandit algorithm provides additional benefits. Below, we show the total sample size assigned to both arms of the experiment:</p>
<div id="98357ee6" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">exp_simple.plot_n()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/robust_adaptive_exp/index_files/figure-html/cell-6-output-1.png" width="750" height="300" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>and the arm assignment probability over time:</p>
<div id="c169148a" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">exp_simple.plot_probabilities()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/robust_adaptive_exp/index_files/figure-html/cell-7-output-1.png" width="750" height="300" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The TS algorithm assigns the majority of the sample to the optimal arm (Arm 1 is the treatment). This demonstrates how we can achieve both valid ATE inference and reward maximization with the bandit algorithm.</p>
</section>
<section id="limitations" class="level3">
<h3 class="anchored" data-anchor-id="limitations">Limitations</h3>
<p>In adaptive experiments with multiple treatment arms, a common issue is being under-powered to detect non-zero ATEs in sub-optimal arms. This happens because the bandit algorithm allocates most of the sample to the optimal arm(s), neglecting the others.</p>
<p>We demonstrate this with an experiment simulating a control arm and four treatment arms with ATEs of 0.1, 0.12, 0.3, and 0.32, respectively, over a fixed sample size of 20,000. We expect the bandit algorithm to allocate most of the sample to arms 3 and 4, leaving arms 1 and 2 under-powered.</p>
<div id="7adb968b" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reward_fn(arm: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb6-2">    values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb6-3">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: generator.binomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Control arm</span></span>
<span id="cb6-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: generator.binomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ATE = 0.1</span></span>
<span id="cb6-5">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>: generator.binomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.62</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ATE = 0.12</span></span>
<span id="cb6-6">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>: generator.binomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ATE = 0.3</span></span>
<span id="cb6-7">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>: generator.binomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.82</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ATE = 0.32</span></span>
<span id="cb6-8">    }</span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> values[arm]</span>
<span id="cb6-10"></span>
<span id="cb6-11">exp_complex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MAD(</span>
<span id="cb6-12">    bandit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TSBernoulli(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, reward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>reward_fn),</span>
<span id="cb6-13">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb6-14">    delta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.24</span>),</span>
<span id="cb6-15">    t_star<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20e3</span>)</span>
<span id="cb6-16">)</span>
<span id="cb6-17">exp_complex.fit(early_stopping<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb6-18"></span>
<span id="cb6-19">ates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(</span>
<span id="cb6-20">    [</span>
<span id="cb6-21">        exp_complex.estimates().assign(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mad"</span>),</span>
<span id="cb6-22">        pd.DataFrame({</span>
<span id="cb6-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arm"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)),</span>
<span id="cb6-24">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ate"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.32</span>],</span>
<span id="cb6-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"truth"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb6-26">        })</span>
<span id="cb6-27">    ],</span>
<span id="cb6-28">    axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-29">)</span>
<span id="cb6-30">(</span>
<span id="cb6-31">    pn.ggplot(</span>
<span id="cb6-32">        ates,</span>
<span id="cb6-33">        mapping<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.aes(</span>
<span id="cb6-34">            x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor(arm)"</span>,</span>
<span id="cb6-35">            y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ate"</span>,</span>
<span id="cb6-36">            ymin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lb"</span>,</span>
<span id="cb6-37">            ymax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ub"</span>,</span>
<span id="cb6-38">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which"</span></span>
<span id="cb6-39">        )</span>
<span id="cb6-40">    )</span>
<span id="cb6-41">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_point(position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.position_dodge(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>))</span>
<span id="cb6-42">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_errorbar(position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.position_dodge(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>), width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb6-43">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_hline(yintercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, linetype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span>
<span id="cb6-44">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.theme_538()</span>
<span id="cb6-45">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.labs(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arm"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ATE"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method"</span>)</span>
<span id="cb6-46">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/robust_adaptive_exp/index_files/figure-html/cell-8-output-1.png" width="750" height="300" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As anticipated, we observe strong ATE estimates for arms 3 and 4 but under-powered estimates for arms 1 and 2 (CSs include 0). We can confirm that, indeed, TS focuses the majority of the sample on arms 3 and 4 to the detriment of power in our experiment.</p>
<div id="06d2d297" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">exp_complex.plot_n()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/robust_adaptive_exp/index_files/figure-html/cell-9-output-1.png" width="750" height="300" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="mad-modified" class="level2">
<h2 class="anchored" data-anchor-id="mad-modified">MAD modified</h2>
<p>I propose an extension of the MAD algorithm to address the challenge of inadequate power in sub-optimal arms. For each treatment arm <img src="https://latex.codecogs.com/png.latex?k%20%5Cin%20K"> and time period <img src="https://latex.codecogs.com/png.latex?t">, I introduce importance weights <img src="https://latex.codecogs.com/png.latex?w_%7Btk%7D%20%5Cin%20%5B0,%201%5D">. Once the estimated ATE for arm <img src="https://latex.codecogs.com/png.latex?k"> becomes statistically significant, <img src="https://latex.codecogs.com/png.latex?w_%7Btk%7D"> begins to shrink toward zero according to a user-defined function of <img src="https://latex.codecogs.com/png.latex?t">.</p>
<p>In the notation of Liang and Bojinov, let <img src="https://latex.codecogs.com/png.latex?A"> represent an arbitrary adaptive algorithm. They define <img src="https://latex.codecogs.com/png.latex?p_t%5EA(k)"> as the assignment probability for arm <img src="https://latex.codecogs.com/png.latex?k"> at time <img src="https://latex.codecogs.com/png.latex?t"> under <img src="https://latex.codecogs.com/png.latex?A">. By construction, the set <img src="https://latex.codecogs.com/png.latex?p_t%5EA(k)"> of adaptive assignment probabilities for all <img src="https://latex.codecogs.com/png.latex?k%20%5Cin%20K"> forms a valid probability distribution over <img src="https://latex.codecogs.com/png.latex?K">, meaning <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bk%20%5Cin%20K%7D%7Bp_t%5EA(k)%7D=1">. I modify these probabilities to <img src="https://latex.codecogs.com/png.latex?g(p_t%5EA(k))"> where <img src="https://latex.codecogs.com/png.latex?g"> re-weights <img src="https://latex.codecogs.com/png.latex?p_t%5EA(k)"> based on the importance weight <img src="https://latex.codecogs.com/png.latex?w_%7Btk%7D">.</p>
<p>For each treatment arm <img src="https://latex.codecogs.com/png.latex?k%20%5Cin%20K"> at time <img src="https://latex.codecogs.com/png.latex?t">, the re-weighted probability <img src="https://latex.codecogs.com/png.latex?g(p_t%5EA(k))"> is computed as follows:</p>
<p>1.) <strong>Apply Importance Weights</strong>: Each probability is first scaled by its importance weight: <img src="https://latex.codecogs.com/png.latex?p_t%5E*(k)=w_%7Btk%7D*p_t%5EA(k)."></p>
<p>2.) <strong>Compute Lost Probability Mass</strong>: The probability mass lost due to down-weighting is: <img src="https://latex.codecogs.com/png.latex?L_t%20=%20%5Csum_%7Bk%20%5Cin%20K%7D%7Bp_t%5EA(k)*(1%20-%20w_%7Btk%7D)%7D."></p>
<p>3.) <strong>Compute Relative Redistribution Weights</strong>: The total weight sum is: <img src="https://latex.codecogs.com/png.latex?W_t%20=%20%5Csum_%7Bk%20%5Cin%20K%7D%7Bw_%7Btk%7D%7D."> Each arm’s share of the remaining mass is: <img src="https://latex.codecogs.com/png.latex?r_%7Btk%7D%20=%20%5Cfrac%7Bw_%7Btk%7D%7D%7BW_t%7D."></p>
<p>4.) <strong>Redistribute Lost Mass</strong>: Redistribute the lost mass proportionally to the relative weights: <img src="https://latex.codecogs.com/png.latex?p_t%5Eg(k)%20=%20p_t%5E*(k)%20+%20(r_%7Btk%7D%20*%20L_t)."></p>
<p>5.) <strong>Normalization Check</strong>: Since <img src="https://latex.codecogs.com/png.latex?p_t%5Eg(k)"> for all <img src="https://latex.codecogs.com/png.latex?k%20%5Cin%20K"> forms a valid probability distribution over <img src="https://latex.codecogs.com/png.latex?K">, it satisfies: <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bk%20%5Cin%20K%7Dp_t%5Eg(k)=1."></p>
<p>Thus, the function <img src="https://latex.codecogs.com/png.latex?g"> modifies the original assignment probabilities by scaling each by its importance weight and redistributing the lost probability mass in a manner that preserves the total probability sum.</p>
<section id="user-specified-decay-of-importance-weights" class="level3">
<h3 class="anchored" data-anchor-id="user-specified-decay-of-importance-weights">User-Specified Decay of Importance Weights</h3>
<p>The importance weight function <img src="https://latex.codecogs.com/png.latex?w_%7Btk%7D">​ controls how quickly the assignment probability for arm <img src="https://latex.codecogs.com/png.latex?k"> shrinks once its estimated ATE becomes statistically significant. This user-defined function balances two extremes:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?w_%7Btk%7D=1"> for all <img src="https://latex.codecogs.com/png.latex?t">, which keeps <img src="https://latex.codecogs.com/png.latex?g(p_t%5EA(k))=p_t%5EA(k)">, making the algorithm identical to the original MAD design.</li>
<li><img src="https://latex.codecogs.com/png.latex?w_%7Btk%7D=0"> after arm <img src="https://latex.codecogs.com/png.latex?k"> reaches statistical significance, redirecting all future probability mass away from arm <img src="https://latex.codecogs.com/png.latex?k"> and prioritizing underpowered arms.</li>
<li>More generally, the user defines <img src="https://latex.codecogs.com/png.latex?w_%7Btk%7D"> somewhere in between, where:
<ul>
<li>A slower decay of <img src="https://latex.codecogs.com/png.latex?w_%7Btk%7D"> (closer to 1) retains more influence from the adaptive algorithm’s assignment probabilities.</li>
<li>A faster decay (closer to 0) shifts the algorithm toward prioritizing underpowered arms at the expense of bandit goals (e.g.&nbsp;reward maximization).</li>
</ul></li>
</ul>
<p>Reasonable choices for <img src="https://latex.codecogs.com/png.latex?w_%7Btk%7D"> include polynomial or exponential decay, providing flexibility in tuning sample reallocation.</p>
</section>
</section>
<section id="algorithm-comparison" class="level2">
<h2 class="anchored" data-anchor-id="algorithm-comparison">Algorithm comparison</h2>
<p>I compare the two algorithms to highlight the benefits of the modified approach. The modified algorithm significantly improves power to detect non-zero ATEs in all treatment arms and provides more precise ATE estimates than the original MAD algorithm with the same sample size. However, this comes at the cost of assigning more sample to sub-optimal arms, where “optimal” is defined by the underlying bandit algorithm.</p>
<section id="improved-power-and-precision" class="level3">
<h3 class="anchored" data-anchor-id="improved-power-and-precision">Improved power and precision</h3>
<p>The following plots demonstrate the increased power and precision of the modified MAD algorithm.</p>
<div id="d3568503" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the modified algorithm</span></span>
<span id="cb8-2">mad_modified <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MADModified(</span>
<span id="cb8-3">    bandit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TSBernoulli(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, reward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>reward_fn),</span>
<span id="cb8-4">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb8-5">    delta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.24</span>),</span>
<span id="cb8-6">    t_star<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20e3</span>),</span>
<span id="cb8-7">    decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.</span>))</span>
<span id="cb8-8">)</span>
<span id="cb8-9">mad_modified.fit(cs_precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, early_stopping<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the vanilla algorithm</span></span>
<span id="cb8-12">mad_vanilla <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MAD(</span>
<span id="cb8-13">    bandit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TSBernoulli(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, reward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>reward_fn),</span>
<span id="cb8-14">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb8-15">    delta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.24</span>),</span>
<span id="cb8-16">    t_star<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mad_modified._bandit._t</span>
<span id="cb8-17">)</span>
<span id="cb8-18">mad_vanilla.fit(verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, early_stopping<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare the ATEs and CSs</span></span>
<span id="cb8-21">ates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(</span>
<span id="cb8-22">    [</span>
<span id="cb8-23">        mad_modified.estimates().assign(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MADMod"</span>),</span>
<span id="cb8-24">        mad_vanilla.estimates().assign(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MAD"</span>),</span>
<span id="cb8-25">        pd.DataFrame({</span>
<span id="cb8-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arm"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)),</span>
<span id="cb8-27">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ate"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.32</span>],</span>
<span id="cb8-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Truth"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb8-29">        })</span>
<span id="cb8-30">    ],</span>
<span id="cb8-31">    axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-32">)</span>
<span id="cb8-33">(</span>
<span id="cb8-34">    pn.ggplot(</span>
<span id="cb8-35">        ates,</span>
<span id="cb8-36">        mapping<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.aes(</span>
<span id="cb8-37">            x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor(arm)"</span>,</span>
<span id="cb8-38">            y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ate"</span>,</span>
<span id="cb8-39">            ymin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lb"</span>,</span>
<span id="cb8-40">            ymax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ub"</span>,</span>
<span id="cb8-41">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which"</span></span>
<span id="cb8-42">        )</span>
<span id="cb8-43">    )</span>
<span id="cb8-44">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_point(position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.position_dodge(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>))</span>
<span id="cb8-45">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_errorbar(position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.position_dodge(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>), width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb8-46">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_hline(yintercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, linetype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span>
<span id="cb8-47">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.theme_538()</span>
<span id="cb8-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.labs(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arm"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ATE"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method"</span>)</span>
<span id="cb8-49">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/robust_adaptive_exp/index_files/figure-html/cell-10-output-1.png" width="750" height="300" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And the following plot compares the sample assignment to the treatment arms of the two algorithms:</p>
<div id="95179b17" class="cell" data-execution_count="10">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">sample_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([</span>
<span id="cb9-2">    pd.DataFrame(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb9-3">    [</span>
<span id="cb9-4">        {</span>
<span id="cb9-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arm"</span>: [k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mad_modified._ate))],</span>
<span id="cb9-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>: [last(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mad_modified._n],</span>
<span id="cb9-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MADMod"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mad_modified._ate)</span>
<span id="cb9-8">        },</span>
<span id="cb9-9">        {</span>
<span id="cb9-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arm"</span>: [k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mad_vanilla._ate))],</span>
<span id="cb9-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>: [last(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mad_vanilla._n],</span>
<span id="cb9-12">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MAD"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mad_vanilla._ate)</span>
<span id="cb9-13">        }</span>
<span id="cb9-14">    ]</span>
<span id="cb9-15">])</span>
<span id="cb9-16">(</span>
<span id="cb9-17">    pn.ggplot(sample_sizes, pn.aes(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor(arm)"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which"</span>))</span>
<span id="cb9-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_bar(stat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identity"</span>, position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.position_dodge(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>), width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb9-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.theme_538()</span>
<span id="cb9-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.labs(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arm"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method"</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method"</span>)</span>
<span id="cb9-21">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/robust_adaptive_exp/index_files/figure-html/cell-11-output-1.png" width="750" height="300" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="simulation-results-over-10000-runs" class="level3">
<h3 class="anchored" data-anchor-id="simulation-results-over-10000-runs">Simulation results over 1,0000 runs</h3>
<p>We can more precisely quantify the improvements by running 1,000 simulations, comparing Type 2 error and confidence band width between the vanilla MAD algorithm and the modified algorithm. Each simulation runs for 20,000 iterations with early stopping. If the modified algorithm stops early, the vanilla algorithm will also stop early to maintain equal sample sizes in each simulation.</p>
<div id="33091dd6" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> delta_fn(x):</span>
<span id="cb10-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.24</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> decay_fn(x):</span>
<span id="cb10-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.</span>))</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compare(i):</span>
<span id="cb10-8">    mad_modified <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MADModified(</span>
<span id="cb10-9">        bandit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TSBernoulli(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, reward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>reward_fn),</span>
<span id="cb10-10">        alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb10-11">        delta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delta_fn,</span>
<span id="cb10-12">        t_star<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2e4</span>),</span>
<span id="cb10-13">        decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>decay_fn</span>
<span id="cb10-14">    )</span>
<span id="cb10-15">    mad_modified.fit(cs_precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, early_stopping<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-16"></span>
<span id="cb10-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the vanilla algorithm</span></span>
<span id="cb10-18">    mad_vanilla <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MAD(</span>
<span id="cb10-19">        bandit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TSBernoulli(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, reward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>reward_fn),</span>
<span id="cb10-20">        alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb10-21">        delta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delta_fn,</span>
<span id="cb10-22">        t_star<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mad_modified._bandit._t</span>
<span id="cb10-23">    )</span>
<span id="cb10-24">    mad_vanilla.fit(verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, early_stopping<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb10-25"></span>
<span id="cb10-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the Type 2 error and the Confidence Sequence width</span></span>
<span id="cb10-27"></span>
<span id="cb10-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## For modified algorithm</span></span>
<span id="cb10-29">    mad_mod_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb10-30">        pd</span>
<span id="cb10-31">        .DataFrame([</span>
<span id="cb10-32">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arm"</span>: k, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>: last(mad_modified._n[k])}</span>
<span id="cb10-33">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mad_modified._bandit.k())</span>
<span id="cb10-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> mad_modified._bandit.control()</span>
<span id="cb10-35">        ])</span>
<span id="cb10-36">        .assign(</span>
<span id="cb10-37">            n_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> y: y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>]))</span>
<span id="cb10-38">        )</span>
<span id="cb10-39">    )</span>
<span id="cb10-40">    mad_mod_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb10-41">        mad_modified</span>
<span id="cb10-42">        .estimates()</span>
<span id="cb10-43">        .assign(</span>
<span id="cb10-44">            idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i,</span>
<span id="cb10-45">            method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modified"</span>,</span>
<span id="cb10-46">            width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ub"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lb"</span>],</span>
<span id="cb10-47">            error<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lb"</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ub"</span>]))</span>
<span id="cb10-48">        )</span>
<span id="cb10-49">        .merge(mad_mod_n, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arm"</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>)</span>
<span id="cb10-50">    )</span>
<span id="cb10-51"></span>
<span id="cb10-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## For vanilla algorithm</span></span>
<span id="cb10-53">    mad_van_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb10-54">        pd</span>
<span id="cb10-55">        .DataFrame([</span>
<span id="cb10-56">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arm"</span>: k, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>: last(mad_vanilla._n[k])}</span>
<span id="cb10-57">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mad_vanilla._bandit.k())</span>
<span id="cb10-58">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> mad_vanilla._bandit.control()</span>
<span id="cb10-59">        ])</span>
<span id="cb10-60">        .assign(</span>
<span id="cb10-61">            n_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> y: y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>]))</span>
<span id="cb10-62">        )</span>
<span id="cb10-63">    )</span>
<span id="cb10-64">    mad_van_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb10-65">        mad_vanilla</span>
<span id="cb10-66">        .estimates()</span>
<span id="cb10-67">        .assign(</span>
<span id="cb10-68">            idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i,</span>
<span id="cb10-69">            method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mad"</span>,</span>
<span id="cb10-70">            width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ub"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lb"</span>],</span>
<span id="cb10-71">            error<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lb"</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ub"</span>]))</span>
<span id="cb10-72">        )</span>
<span id="cb10-73">        .merge(mad_van_n, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arm"</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>)</span>
<span id="cb10-74">    )</span>
<span id="cb10-75"></span>
<span id="cb10-76">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb10-77">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metrics"</span>: pd.concat([mad_mod_df, mad_van_df]),</span>
<span id="cb10-78">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reward"</span>: {</span>
<span id="cb10-79">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modified"</span>: np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(mad_modified._rewards),</span>
<span id="cb10-80">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mad"</span>: np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(mad_vanilla._rewards)</span>
<span id="cb10-81">        }</span>
<span id="cb10-82">    }</span>
<span id="cb10-83">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> out</span>
<span id="cb10-84"></span>
<span id="cb10-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute in parallel with joblib</span></span>
<span id="cb10-86">comparison_results_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-87">    x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb10-88">    joblib.Parallel(return_as<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"generator"</span>, n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)(</span>
<span id="cb10-89">        joblib.delayed(compare)(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb10-90">    )</span>
<span id="cb10-91">]</span>
<span id="cb10-92"></span>
<span id="cb10-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare performance on key metrics across simulations</span></span>
<span id="cb10-94">metrics_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.melt(</span>
<span id="cb10-95">    (</span>
<span id="cb10-96">        pd</span>
<span id="cb10-97">        .concat([x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metrics"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> comparison_results_list])</span>
<span id="cb10-98">        .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-99">        .assign(error<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> y: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(y)))</span>
<span id="cb10-100">    ),</span>
<span id="cb10-101">    id_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>],</span>
<span id="cb10-102">    value_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_pct"</span>],</span>
<span id="cb10-103">    var_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meas"</span>,</span>
<span id="cb10-104">    value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb10-105">)</span>
<span id="cb10-106"></span>
<span id="cb10-107"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare reward accumulation across simulations</span></span>
<span id="cb10-108">reward_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.melt(</span>
<span id="cb10-109">    pd.DataFrame([x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reward"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> comparison_results_list]),</span>
<span id="cb10-110">    value_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modified"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mad"</span>],</span>
<span id="cb10-111">    var_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>,</span>
<span id="cb10-112">    value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reward"</span></span>
<span id="cb10-113">)</span>
<span id="cb10-114"></span>
<span id="cb10-115">metrics_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb10-116">    metrics_df</span>
<span id="cb10-117">    .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meas"</span>], as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).agg(</span>
<span id="cb10-118">        mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>),</span>
<span id="cb10-119">        std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>),</span>
<span id="cb10-120">        n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>)</span>
<span id="cb10-121">    )</span>
<span id="cb10-122">    .assign(</span>
<span id="cb10-123">        se<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.sqrt(x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>]),</span>
<span id="cb10-124">        t_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: t.ppf(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.975</span>, x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb10-125">        ub<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t_val"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"se"</span>],</span>
<span id="cb10-126">        lb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t_val"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"se"</span>]</span>
<span id="cb10-127">    )</span>
<span id="cb10-128">    .drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"se"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t_val"</span>])</span>
<span id="cb10-129">)</span></code></pre></div>
</details>
</div>
<p>The following plot shows the mean (and 95% confidence intervals) of the Type 2 error and CS width for both algorithms.</p>
<div id="417ba8f2" class="cell" data-execution_count="12">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">facet_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb11-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Type 2 error"</span>,</span>
<span id="cb11-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Interval width"</span>,</span>
<span id="cb11-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample size"</span>,</span>
<span id="cb11-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_pct"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample size %"</span></span>
<span id="cb11-6">}</span>
<span id="cb11-7">(</span>
<span id="cb11-8">    pn.ggplot(</span>
<span id="cb11-9">        metrics_summary[metrics_summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meas"</span>].isin([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span>])],</span>
<span id="cb11-10">        pn.aes(</span>
<span id="cb11-11">            x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor(arm)"</span>,</span>
<span id="cb11-12">            y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>,</span>
<span id="cb11-13">            ymin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lb"</span>,</span>
<span id="cb11-14">            ymax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ub"</span>,</span>
<span id="cb11-15">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span></span>
<span id="cb11-16">        )</span>
<span id="cb11-17">    )</span>
<span id="cb11-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_point(position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.position_dodge(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>))</span>
<span id="cb11-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_errorbar(position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.position_dodge(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>), width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb11-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.facet_wrap(</span>
<span id="cb11-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~ meas"</span>,</span>
<span id="cb11-22">        labeller<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: facet_labels[x],</span>
<span id="cb11-23">        scales<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span></span>
<span id="cb11-24">    )</span>
<span id="cb11-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.theme_538()</span>
<span id="cb11-26">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.labs(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arm"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method"</span>)</span>
<span id="cb11-27">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/robust_adaptive_exp/index_files/figure-html/cell-13-output-1.png" width="750" height="300" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The modified MAD algorithm achieves far lower Type 2 error and improved ATE precision in all treatment arms.</p>
</section>
<section id="tradeoffs" class="level3">
<h3 class="anchored" data-anchor-id="tradeoffs">Tradeoffs</h3>
<p>These plots illustrate the tradeoffs of the modified algorithm. On average, it allocates significantly more sample to sub-optimal arms compared to the standard MAD algorithm.</p>
<div id="fc05de57" class="cell" data-execution_count="13">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">(</span>
<span id="cb12-2">    pn.ggplot(</span>
<span id="cb12-3">        metrics_summary[metrics_summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meas"</span>].isin([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_pct"</span>])],</span>
<span id="cb12-4">        pn.aes(</span>
<span id="cb12-5">            x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor(arm)"</span>,</span>
<span id="cb12-6">            y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>,</span>
<span id="cb12-7">            ymin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lb"</span>,</span>
<span id="cb12-8">            ymax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ub"</span>,</span>
<span id="cb12-9">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span></span>
<span id="cb12-10">        )</span>
<span id="cb12-11">    )</span>
<span id="cb12-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_point(position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.position_dodge(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>))</span>
<span id="cb12-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_errorbar(position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pn.position_dodge(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>), width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb12-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.facet_wrap(</span>
<span id="cb12-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~ meas"</span>,</span>
<span id="cb12-16">        labeller<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: facet_labels[x],</span>
<span id="cb12-17">        scales<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span></span>
<span id="cb12-18">    )</span>
<span id="cb12-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.theme_538()</span>
<span id="cb12-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.labs(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arm"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method"</span>)</span>
<span id="cb12-21">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/robust_adaptive_exp/index_files/figure-html/cell-14-output-1.png" width="750" height="300" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As a result, this reallocation reduces total reward accumulation. The difference in accumulated reward across the 1,000 simulations is shown below:</p>
<div id="2960088d" class="cell" data-execution_count="14">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">(</span>
<span id="cb13-2">    pn.ggplot(reward_df, pn.aes(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reward"</span>))</span>
<span id="cb13-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_boxplot()</span>
<span id="cb13-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.theme_538()</span>
<span id="cb13-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.labs(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cumulative reward"</span>)</span>
<span id="cb13-6">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/robust_adaptive_exp/index_files/figure-html/cell-15-output-1.png" width="750" height="300" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In summary, this approach allows us to achieve <strong>anytime-valid inference on the ATE</strong>, enabling early stopping for greater flexibility and efficiency. It also allows us to <strong>ensure dynamic sample allocation</strong>, guaranteeing sufficient power for all (or the top n) treatment arms.</p>


</section>

 ]]></description>
  <category>Adaptive Experiments</category>
  <category>Anytime-valid Inference</category>
  <category>Bandits</category>
  <guid>https://dmolitor.com/blog/posts/robust_adaptive_exp/</guid>
  <pubDate>Tue, 11 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://dmolitor.com/blog/posts/robust_adaptive_exp/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Conformal Prediction Beyond Exchangeability</title>
  <link>https://dmolitor.com/blog/posts/conformal-beyond-exchangeability/</link>
  <description><![CDATA[ 




<section id="dependencies" class="level3">
<h3 class="anchored" data-anchor-id="dependencies">Dependencies</h3>
<div id="6eae1a35" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> great_tables <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GT, md</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy.typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> npt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotnine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pn</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Any, Callable, List</span>
<span id="cb1-10"></span>
<span id="cb1-11">base_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path().cwd()</span>
<span id="cb1-12">generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng()</span></code></pre></div>
</div>
</section>
<section id="data" class="level3">
<h3 class="anchored" data-anchor-id="data">Data</h3>
<div id="5f7ed22e" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Electricity data</span></span>
<span id="cb2-2">electricity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(base_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"electricity-normalized.csv"</span>)</span>
<span id="cb2-3">electricity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-4">    electricity</span>
<span id="cb2-5">    .iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17760</span>:]</span>
<span id="cb2-6">    .assign(period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)</span>
<span id="cb2-7">    .loc[<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df: (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"period"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"period"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)]</span>
<span id="cb2-8">    [[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transfer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nswprice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vicprice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nswdemand"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vicdemand"</span>]]</span>
<span id="cb2-9">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-10">)</span>
<span id="cb2-11">permuted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> electricity.sample(frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to generate simulated data</span></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sim_data(N: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, d: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, setting: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[pd.DataFrame, npt.NDArray]:</span>
<span id="cb2-15">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.multivariate_normal(mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.zeros(d), cov<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.eye(d), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="cb2-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> setting <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb2-17">        beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-18">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, N)</span>
<span id="cb2-19">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"feature_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(d)])</span>
<span id="cb2-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> setting <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb2-21">        beta_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-22">        beta_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-23">        beta_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-24">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(N)</span>
<span id="cb2-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate y for different segments</span></span>
<span id="cb2-26">        y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> beta_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb2-27">        y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> beta_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb2-28">        y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> beta_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb2-29">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"feature_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(d)])</span>
<span id="cb2-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-31">        beta_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-32">        beta_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-33">        beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(beta_start, beta_end, N)</span>
<span id="cb2-34">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([X[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> beta[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(N)])</span>
<span id="cb2-35">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'feature_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(d)])</span>
<span id="cb2-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (X, y)</span></code></pre></div>
</div>
</section>
<section id="functions" class="level3">
<h3 class="anchored" data-anchor-id="functions">Functions</h3>
<p>The <code>nexcp_split</code> function implements non-exchangeable split conformal prediction (CP). However, we can force it to also implement standard CP, which assumes exchangeability, by setting uniform weights. So we only need one function to replicate the results!</p>
<div id="faf2c16b" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> normalize_weights(weights: npt.NDArray):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> weights.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb3-3"></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> nexcp_split(</span>
<span id="cb3-6">    model: Callable[[npt.NDArray, pd.DataFrame, npt.NDArray], Any],</span>
<span id="cb3-7">    split_function: Callable[[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], npt.NDArray],</span>
<span id="cb3-8">    y: npt.NDArray,</span>
<span id="cb3-9">    X: pd.DataFrame,</span>
<span id="cb3-10">    tag_function: Callable[[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], npt.NDArray],</span>
<span id="cb3-11">    weight_function: Callable[[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], npt.NDArray],</span>
<span id="cb3-12">    alpha: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb3-13">    test_index: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb3-14">):</span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Implements non-exchangeable split conformal prediction"""</span></span>
<span id="cb3-16">    </span>
<span id="cb3-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pull test observation from data</span></span>
<span id="cb3-18">    y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y[test_index]</span>
<span id="cb3-19">    X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.iloc[[test_index]]</span>
<span id="cb3-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select all observations up to that point</span></span>
<span id="cb3-21">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y[:test_index]</span>
<span id="cb3-22">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.iloc[:test_index]</span>
<span id="cb3-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate indices for train/calibration split</span></span>
<span id="cb3-24">    split_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_function(test_index)</span>
<span id="cb3-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split data, tags, and weights</span></span>
<span id="cb3-26">    X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.iloc[split_indices]</span>
<span id="cb3-27">    y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y[split_indices]</span>
<span id="cb3-28">    X_calib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.drop(split_indices)</span>
<span id="cb3-29">    y_calib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.delete(y, split_indices)</span>
<span id="cb3-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate tags and weights</span></span>
<span id="cb3-31">    tags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tag_function(test_index)</span>
<span id="cb3-32">    weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weight_function(test_index)</span>
<span id="cb3-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train model</span></span>
<span id="cb3-34">    model_base <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(y_train, X_train, weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tags[split_indices])</span>
<span id="cb3-35">    model_fitted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_base.fit()</span>
<span id="cb3-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate residuals</span></span>
<span id="cb3-37">    residuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(y_calib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> model_fitted.predict(X_calib))</span>
<span id="cb3-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate weighted quantile of residuals</span></span>
<span id="cb3-39">    weights_calib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normalize_weights(np.delete(weights[:test_index], split_indices))</span>
<span id="cb3-40">    q_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(</span>
<span id="cb3-41">        residuals,</span>
<span id="cb3-42">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha,</span>
<span id="cb3-43">        weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>weights_calib,</span>
<span id="cb3-44">        method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inverted_cdf"</span></span>
<span id="cb3-45">    )</span>
<span id="cb3-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate predicted value</span></span>
<span id="cb3-47">    y_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_fitted.predict(X_test).iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate CI</span></span>
<span id="cb3-49">    lb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> q_hat</span>
<span id="cb3-50">    ub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> q_hat</span>
<span id="cb3-51">    covered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> ub</span>
<span id="cb3-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ci"</span>: np.array([lb, y_hat, ub]), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered"</span>: covered, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span>: ub<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lb}</span>
<span id="cb3-53"></span>
<span id="cb3-54"></span>
<span id="cb3-55"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_rolling_coverage(</span>
<span id="cb3-56">    results: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>],</span>
<span id="cb3-57">    alpha: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb3-58">    window: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>,</span>
<span id="cb3-59">    rows: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb3-60">    repeated: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-61">):</span>
<span id="cb3-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Plot the algorithm's mean coverage over a sliding window"""</span></span>
<span id="cb3-63"></span>
<span id="cb3-64">    coverage_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(results)</span>
<span id="cb3-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> repeated:</span>
<span id="cb3-66">        coverage_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-67">            coverage_df</span>
<span id="cb3-68">            .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered"</span>]</span>
<span id="cb3-69">            .mean()</span>
<span id="cb3-70">            .reset_index()</span>
<span id="cb3-71">        )</span>
<span id="cb3-72">    coverage_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coverage_mean"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-73">        coverage_df</span>
<span id="cb3-74">        .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered"</span>]</span>
<span id="cb3-75">        .transform(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.rolling(window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>window).mean())</span>
<span id="cb3-76">    )</span>
<span id="cb3-77">    coverage_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coverage_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>]).cumcount() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-78">    coverage_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coverage_df.dropna(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coverage_mean"</span>])</span>
<span id="cb3-79">    coverage_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-80">        pn.ggplot(</span>
<span id="cb3-81">            coverage_df,</span>
<span id="cb3-82">            pn.aes(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coverage_mean"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, group<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>)</span>
<span id="cb3-83">        )</span>
<span id="cb3-84">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_line()</span>
<span id="cb3-85">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_hline(yintercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>alpha, linetype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"solid"</span>)</span>
<span id="cb3-86">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.scale_y_continuous(limits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-87">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.facet_wrap(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~ dataset"</span>, nrow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rows, scales<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>)</span>
<span id="cb3-88">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.theme_538()</span>
<span id="cb3-89">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.labs(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Coverage"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method"</span>)</span>
<span id="cb3-90">    )</span>
<span id="cb3-91">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> coverage_plot</span>
<span id="cb3-92"></span>
<span id="cb3-93"></span>
<span id="cb3-94"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_rolling_width(</span>
<span id="cb3-95">    results: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>,</span>
<span id="cb3-96">    window: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>,</span>
<span id="cb3-97">    rows: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb3-98">    repeated: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-99">):</span>
<span id="cb3-100">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Plot the algorithm's mean prediction interval width over a sliding window"""</span></span>
<span id="cb3-101"></span>
<span id="cb3-102">    width_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(results)</span>
<span id="cb3-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> repeated:</span>
<span id="cb3-104">        width_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-105">            width_df</span>
<span id="cb3-106">            .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span>]</span>
<span id="cb3-107">            .mean()</span>
<span id="cb3-108">            .reset_index()</span>
<span id="cb3-109">        )</span>
<span id="cb3-110">    width_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_mean"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-111">        width_df</span>
<span id="cb3-112">        .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span>]</span>
<span id="cb3-113">        .transform(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.rolling(window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>window).mean())</span>
<span id="cb3-114">    )</span>
<span id="cb3-115">    width_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> width_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>]).cumcount() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-116">    width_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> width_df.dropna(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_mean"</span>])</span>
<span id="cb3-117">    width_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-118">        pn.ggplot(</span>
<span id="cb3-119">            width_df,</span>
<span id="cb3-120">            pn.aes(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_mean"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, group<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>)</span>
<span id="cb3-121">        )</span>
<span id="cb3-122">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.geom_line()</span>
<span id="cb3-123">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.facet_wrap(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~ dataset"</span>, nrow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rows, scales<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>)</span>
<span id="cb3-124">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.theme_538()</span>
<span id="cb3-125">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pn.labs(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Width"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method"</span>)</span>
<span id="cb3-126">    )</span>
<span id="cb3-127">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> width_plot</span></code></pre></div>
</div>
</section>
<section id="electricity-example" class="level3">
<h3 class="anchored" data-anchor-id="electricity-example">Electricity example</h3>
<p>Note: I implement non-exchangeable split CP with least-squares by using WLS and setting all the tags to a uniform value. Standard CP is implemented by setting all the weights to a uniform value as mentioned above.</p>
<div id="d93e82e9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">split_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: np.sort(generator.choice(x, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.floor(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)), replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span>
<span id="cb4-2">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create X and y for the normal and permuted data</span></span>
<span id="cb4-5">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (electricity.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transfer"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), electricity[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transfer"</span>].to_numpy())</span>
<span id="cb4-6">X_perm, y_perm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (permuted.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transfer"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), permuted[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transfer"</span>].to_numpy())</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict for each observation from N=100 to N=len(electricity)</span></span>
<span id="cb4-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(electricity)), total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(electricity)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb4-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> method <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NexCP+LS"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NexCP+WLS"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CP+LS"</span>]:</span>
<span id="cb4-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dataset <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Electricity"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Permuted"</span>]:</span>
<span id="cb4-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Electricity"</span>:</span>
<span id="cb4-13">                X_model, y_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (X, y)</span>
<span id="cb4-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-15">                X_model, y_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (X_perm, y_perm)</span>
<span id="cb4-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NexCP+LS"</span>:</span>
<span id="cb4-17">                tag_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-18">                weight_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>np.arange(x, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NexCP+WLS"</span>:</span>
<span id="cb4-20">                tag_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>np.arange(x, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-21">                weight_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tag_fn</span>
<span id="cb4-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-23">                tag_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-24">                weight_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tag_fn</span>
<span id="cb4-25">            out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nexcp_split(</span>
<span id="cb4-26">                model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sm.WLS,</span>
<span id="cb4-27">                split_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>split_fn,</span>
<span id="cb4-28">                y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_model,</span>
<span id="cb4-29">                X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X_model,</span>
<span id="cb4-30">                tag_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tag_fn,</span>
<span id="cb4-31">                weight_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>weight_fn,</span>
<span id="cb4-32">                alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb4-33">                test_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i</span>
<span id="cb4-34">            )</span>
<span id="cb4-35">            out[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> method</span>
<span id="cb4-36">            out[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset</span>
<span id="cb4-37">            out[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb4-38">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> out[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ci"</span>]</span>
<span id="cb4-39">            results.append(out)</span></code></pre></div>
</div>
<section id="plots" class="level4">
<h4 class="anchored" data-anchor-id="plots">Plots</h4>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">coverage_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_rolling_coverage(results, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb5-2">coverage_plot.show()</span>
<span id="cb5-3"></span>
<span id="cb5-4">width_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_rolling_width(results, window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb5-5">width_plot.show()</span></code></pre></div>
<div id="3f2238f9" class="cell quarto-layout-panel" data-layout-ncol="2" data-execution_count="5">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/conformal-beyond-exchangeability/index_files/figure-html/cell-6-output-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="640"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/conformal-beyond-exchangeability/index_files/figure-html/cell-6-output-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="640"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="table" class="level4">
<h4 class="anchored" data-anchor-id="table">Table</h4>
<div id="7695a52a" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb6-2">    pd</span>
<span id="cb6-3">    .DataFrame(results)</span>
<span id="cb6-4">    .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>])</span>
<span id="cb6-5">    .mean()</span>
<span id="cb6-6">    .reset_index()</span>
<span id="cb6-7">)</span>
<span id="cb6-8">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb6-9">    table</span>
<span id="cb6-10">    .pivot_table(</span>
<span id="cb6-11">        index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'method'</span>,</span>
<span id="cb6-12">        columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dataset'</span>,</span>
<span id="cb6-13">        values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'covered'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>]</span>
<span id="cb6-14">    )</span>
<span id="cb6-15">)</span>
<span id="cb6-16">table.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>lower()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> table.columns]</span>
<span id="cb6-17">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> table.reset_index()</span>
<span id="cb6-18">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb6-19">    GT(table, rowname_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>)</span>
<span id="cb6-20">    .tab_spanner(</span>
<span id="cb6-21">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Electricity data"</span>,</span>
<span id="cb6-22">        columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered_electricity"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_electricity"</span>]</span>
<span id="cb6-23">    )</span>
<span id="cb6-24">    .tab_spanner(</span>
<span id="cb6-25">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Permuted electricity data"</span>,</span>
<span id="cb6-26">        columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered_permuted"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_permuted"</span>]</span>
<span id="cb6-27">    )</span>
<span id="cb6-28">    .fmt_number(</span>
<span id="cb6-29">        columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-30">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered_electricity"</span>,</span>
<span id="cb6-31">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_electricity"</span>,</span>
<span id="cb6-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered_permuted"</span>,</span>
<span id="cb6-33">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_permuted"</span></span>
<span id="cb6-34">        ],</span>
<span id="cb6-35">        decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb6-36">    )</span>
<span id="cb6-37">    .cols_label(</span>
<span id="cb6-38">        covered_electricity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Coverage"</span>,</span>
<span id="cb6-39">        width_electricity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Width"</span>,</span>
<span id="cb6-40">        covered_permuted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Coverage"</span>,</span>
<span id="cb6-41">        width_permuted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Width"</span></span>
<span id="cb6-42">    )</span>
<span id="cb6-43">)</span>
<span id="cb6-44">table.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="skvuoqzjls" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>
#skvuoqzjls table {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
        }

#skvuoqzjls thead, tbody, tfoot, tr, td, th { border-style: none; }
 tr { background-color: transparent; }
#skvuoqzjls p { margin: 0; padding: 0; }
 #skvuoqzjls .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }
 #skvuoqzjls .gt_caption { padding-top: 4px; padding-bottom: 4px; }
 #skvuoqzjls .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }
 #skvuoqzjls .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }
 #skvuoqzjls .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }
 #skvuoqzjls .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }
 #skvuoqzjls .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }
 #skvuoqzjls .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }
 #skvuoqzjls .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }
 #skvuoqzjls .gt_column_spanner_outer:first-child { padding-left: 0; }
 #skvuoqzjls .gt_column_spanner_outer:last-child { padding-right: 0; }
 #skvuoqzjls .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }
 #skvuoqzjls .gt_spanner_row { border-bottom-style: hidden; }
 #skvuoqzjls .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }
 #skvuoqzjls .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }
 #skvuoqzjls .gt_from_md> :first-child { margin-top: 0; }
 #skvuoqzjls .gt_from_md> :last-child { margin-bottom: 0; }
 #skvuoqzjls .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }
 #skvuoqzjls .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }
 #skvuoqzjls .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }
 #skvuoqzjls .gt_row_group_first td { border-top-width: 2px; }
 #skvuoqzjls .gt_row_group_first th { border-top-width: 2px; }
 #skvuoqzjls .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }
 #skvuoqzjls .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }
 #skvuoqzjls .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }
 #skvuoqzjls .gt_left { text-align: left; }
 #skvuoqzjls .gt_center { text-align: center; }
 #skvuoqzjls .gt_right { text-align: right; font-variant-numeric: tabular-nums; }
 #skvuoqzjls .gt_font_normal { font-weight: normal; }
 #skvuoqzjls .gt_font_bold { font-weight: bold; }
 #skvuoqzjls .gt_font_italic { font-style: italic; }
 #skvuoqzjls .gt_super { font-size: 65%; }
 #skvuoqzjls .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }
 #skvuoqzjls .gt_asterisk { font-size: 100%; vertical-align: 0; }
 
</style>

<table class="gt_table caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<tbody>
<tr class="gt_col_headings gt_spanner_row odd">
<td rowspan="2" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" scope="col"></td>
<td colspan="2" id="Electricity data" class="gt_center gt_columns_top_border gt_column_spanner_outer" data-quarto-table-cell-role="th" scope="colgroup"><span class="gt_column_spanner">Electricity data</span></td>
<td colspan="2" id="Permuted electricity data" class="gt_center gt_columns_top_border gt_column_spanner_outer" data-quarto-table-cell-role="th" scope="colgroup"><span class="gt_column_spanner">Permuted electricity data</span></td>
</tr>
<tr class="gt_col_headings even">
<td id="Coverage" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Coverage</td>
<td id="Width" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Width</td>
<td id="Coverage" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Coverage</td>
<td id="Width" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Width</td>
</tr>
</tbody>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">CP+LS</td>
<td class="gt_row gt_right">0.859</td>
<td class="gt_row gt_right">0.558</td>
<td class="gt_row gt_right">0.895</td>
<td class="gt_row gt_right">0.628</td>
</tr>
<tr class="even">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">NexCP+LS</td>
<td class="gt_row gt_right">0.878</td>
<td class="gt_row gt_right">0.581</td>
<td class="gt_row gt_right">0.902</td>
<td class="gt_row gt_right">0.638</td>
</tr>
<tr class="odd">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">NexCP+WLS</td>
<td class="gt_row gt_right">0.880</td>
<td class="gt_row gt_right">0.497</td>
<td class="gt_row gt_right">0.895</td>
<td class="gt_row gt_right">0.629</td>
</tr>
</tbody>
</table>


</div>
        
</div>
</div>
</section>
</section>
<section id="simulated-example" class="level3">
<h3 class="anchored" data-anchor-id="simulated-example">Simulated example</h3>
<p>This demonstrates the conformal prediction algorithm in the following data settings: i.i.d. data, data generating process with changepoints, and data with distribution drift. In the paper they repeat this 200 times to smooth the estimates, but for computational purposes here I only repeated it 50 times.</p>
<div id="e8b4d8fb" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">split_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: np.sort(generator.choice(x, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.floor(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)), replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span>
<span id="cb7-2">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict for each observation from N=100 to N=len(electricity)</span></span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>), total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rep <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>):</span>
<span id="cb7-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> method <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NexCP+LS"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NexCP+WLS"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CP+LS"</span>]:</span>
<span id="cb7-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dataset <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setting_1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setting_2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setting_3"</span>]:</span>
<span id="cb7-9">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setting_1"</span>:</span>
<span id="cb7-10">                    X_model, y_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sim_data(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, setting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-11">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setting_2"</span>:</span>
<span id="cb7-12">                    X_model, y_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sim_data(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, setting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-13">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-14">                    X_model, y_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sim_data(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, setting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-15">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NexCP+LS"</span>:</span>
<span id="cb7-16">                    tag_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb7-17">                    weight_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>np.arange(x, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-18">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NexCP+WLS"</span>:</span>
<span id="cb7-19">                    tag_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>np.arange(x, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-20">                    weight_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tag_fn</span>
<span id="cb7-21">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-22">                    tag_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb7-23">                    weight_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tag_fn</span>
<span id="cb7-24">                out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nexcp_split(</span>
<span id="cb7-25">                    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sm.WLS,</span>
<span id="cb7-26">                    split_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>split_fn,</span>
<span id="cb7-27">                    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_model,</span>
<span id="cb7-28">                    X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X_model,</span>
<span id="cb7-29">                    tag_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tag_fn,</span>
<span id="cb7-30">                    weight_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>weight_fn,</span>
<span id="cb7-31">                    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb7-32">                    test_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i</span>
<span id="cb7-33">                )</span>
<span id="cb7-34">                out[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> method</span>
<span id="cb7-35">                out[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset</span>
<span id="cb7-36">                out[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb7-37">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> out[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ci"</span>]</span>
<span id="cb7-38">                results.append(out)</span></code></pre></div>
</div>
<section id="plots-1" class="level4">
<h4 class="anchored" data-anchor-id="plots-1">Plots</h4>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">coverage_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_rolling_coverage(</span>
<span id="cb8-2">    results,</span>
<span id="cb8-3">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb8-4">    window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb8-5">    rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb8-6">    repeated<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb8-7">)</span>
<span id="cb8-8">coverage_plot.show()</span>
<span id="cb8-9"></span>
<span id="cb8-10">width_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_rolling_width(results, window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, repeated<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-11">width_plot.show()</span></code></pre></div>
<div id="41a80cb9" class="cell quarto-layout-panel" data-layout-ncol="2" data-execution_count="8">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/conformal-beyond-exchangeability/index_files/figure-html/cell-9-output-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="640"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dmolitor.com/blog/posts/conformal-beyond-exchangeability/index_files/figure-html/cell-9-output-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="640"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="table-1" class="level4">
<h4 class="anchored" data-anchor-id="table-1">Table</h4>
<div id="2d9aaa47" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb9-2">    pd</span>
<span id="cb9-3">    .DataFrame(results)</span>
<span id="cb9-4">    .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>])</span>
<span id="cb9-5">    .mean()</span>
<span id="cb9-6">    .reset_index()</span>
<span id="cb9-7">    .drop(labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-8">    .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>])</span>
<span id="cb9-9">    .mean()</span>
<span id="cb9-10">    .reset_index()</span>
<span id="cb9-11">)</span>
<span id="cb9-12">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb9-13">    table</span>
<span id="cb9-14">    .pivot_table(</span>
<span id="cb9-15">        index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>,</span>
<span id="cb9-16">        columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>,</span>
<span id="cb9-17">        values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span>]</span>
<span id="cb9-18">    )</span>
<span id="cb9-19">)</span>
<span id="cb9-20">table.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>lower()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> table.columns]</span>
<span id="cb9-21">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> table.reset_index()</span>
<span id="cb9-22">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb9-23">    GT(table, rowname_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>)</span>
<span id="cb9-24">    .tab_spanner(</span>
<span id="cb9-25">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Setting 1 (i.i.d. data)"</span>,</span>
<span id="cb9-26">        columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered_setting_1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_setting_1"</span>]</span>
<span id="cb9-27">    )</span>
<span id="cb9-28">    .tab_spanner(</span>
<span id="cb9-29">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Setting 2 (changepoints)"</span>,</span>
<span id="cb9-30">        columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered_setting_2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_setting_2"</span>]</span>
<span id="cb9-31">    )</span>
<span id="cb9-32">    .tab_spanner(</span>
<span id="cb9-33">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Setting 3 (drift)"</span>,</span>
<span id="cb9-34">        columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered_setting_3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_setting_3"</span>]</span>
<span id="cb9-35">    )</span>
<span id="cb9-36">    .fmt_number(</span>
<span id="cb9-37">        columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-38">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered_setting_1"</span>,</span>
<span id="cb9-39">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_setting_1"</span>,</span>
<span id="cb9-40">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered_setting_2"</span>,</span>
<span id="cb9-41">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_setting_2"</span>,</span>
<span id="cb9-42">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covered_setting_3"</span>,</span>
<span id="cb9-43">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width_setting_3"</span></span>
<span id="cb9-44">        ],</span>
<span id="cb9-45">        decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb9-46">    )</span>
<span id="cb9-47">    .cols_label(</span>
<span id="cb9-48">        covered_setting_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Coverage"</span>,</span>
<span id="cb9-49">        width_setting_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Width"</span>,</span>
<span id="cb9-50">        covered_setting_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Coverage"</span>,</span>
<span id="cb9-51">        width_setting_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Width"</span>,</span>
<span id="cb9-52">        covered_setting_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Coverage"</span>,</span>
<span id="cb9-53">        width_setting_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Width"</span></span>
<span id="cb9-54">    )</span>
<span id="cb9-55">)</span>
<span id="cb9-56">table.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="lfyuuzppxt" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>
#lfyuuzppxt table {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
        }

#lfyuuzppxt thead, tbody, tfoot, tr, td, th { border-style: none; }
 tr { background-color: transparent; }
#lfyuuzppxt p { margin: 0; padding: 0; }
 #lfyuuzppxt .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }
 #lfyuuzppxt .gt_caption { padding-top: 4px; padding-bottom: 4px; }
 #lfyuuzppxt .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }
 #lfyuuzppxt .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }
 #lfyuuzppxt .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }
 #lfyuuzppxt .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }
 #lfyuuzppxt .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }
 #lfyuuzppxt .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }
 #lfyuuzppxt .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }
 #lfyuuzppxt .gt_column_spanner_outer:first-child { padding-left: 0; }
 #lfyuuzppxt .gt_column_spanner_outer:last-child { padding-right: 0; }
 #lfyuuzppxt .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }
 #lfyuuzppxt .gt_spanner_row { border-bottom-style: hidden; }
 #lfyuuzppxt .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }
 #lfyuuzppxt .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }
 #lfyuuzppxt .gt_from_md> :first-child { margin-top: 0; }
 #lfyuuzppxt .gt_from_md> :last-child { margin-bottom: 0; }
 #lfyuuzppxt .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }
 #lfyuuzppxt .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }
 #lfyuuzppxt .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }
 #lfyuuzppxt .gt_row_group_first td { border-top-width: 2px; }
 #lfyuuzppxt .gt_row_group_first th { border-top-width: 2px; }
 #lfyuuzppxt .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }
 #lfyuuzppxt .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }
 #lfyuuzppxt .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }
 #lfyuuzppxt .gt_left { text-align: left; }
 #lfyuuzppxt .gt_center { text-align: center; }
 #lfyuuzppxt .gt_right { text-align: right; font-variant-numeric: tabular-nums; }
 #lfyuuzppxt .gt_font_normal { font-weight: normal; }
 #lfyuuzppxt .gt_font_bold { font-weight: bold; }
 #lfyuuzppxt .gt_font_italic { font-style: italic; }
 #lfyuuzppxt .gt_super { font-size: 65%; }
 #lfyuuzppxt .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }
 #lfyuuzppxt .gt_asterisk { font-size: 100%; vertical-align: 0; }
 
</style>

<table class="gt_table caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<tbody>
<tr class="gt_col_headings gt_spanner_row odd">
<td rowspan="2" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" scope="col"></td>
<td colspan="2" id="Setting 1 (i.i.d. data)" class="gt_center gt_columns_top_border gt_column_spanner_outer" data-quarto-table-cell-role="th" scope="colgroup"><span class="gt_column_spanner">Setting 1 (i.i.d. data)</span></td>
<td colspan="2" id="Setting 2 (changepoints)" class="gt_center gt_columns_top_border gt_column_spanner_outer" data-quarto-table-cell-role="th" scope="colgroup"><span class="gt_column_spanner">Setting 2 (changepoints)</span></td>
<td colspan="2" id="Setting 3 (drift)" class="gt_center gt_columns_top_border gt_column_spanner_outer" data-quarto-table-cell-role="th" scope="colgroup"><span class="gt_column_spanner">Setting 3 (drift)</span></td>
</tr>
<tr class="gt_col_headings even">
<td id="Coverage" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Coverage</td>
<td id="Width" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Width</td>
<td id="Coverage" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Coverage</td>
<td id="Width" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Width</td>
<td id="Coverage" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Coverage</td>
<td id="Width" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Width</td>
</tr>
</tbody>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">CP+LS</td>
<td class="gt_row gt_right">0.899</td>
<td class="gt_row gt_right">3.325</td>
<td class="gt_row gt_right">0.832</td>
<td class="gt_row gt_right">6.022</td>
<td class="gt_row gt_right">0.836</td>
<td class="gt_row gt_right">3.754</td>
</tr>
<tr class="even">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">NexCP+LS</td>
<td class="gt_row gt_right">0.898</td>
<td class="gt_row gt_right">3.324</td>
<td class="gt_row gt_right">0.874</td>
<td class="gt_row gt_right">6.692</td>
<td class="gt_row gt_right">0.880</td>
<td class="gt_row gt_right">4.208</td>
</tr>
<tr class="odd">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">NexCP+WLS</td>
<td class="gt_row gt_right">0.897</td>
<td class="gt_row gt_right">3.403</td>
<td class="gt_row gt_right">0.896</td>
<td class="gt_row gt_right">4.114</td>
<td class="gt_row gt_right">0.897</td>
<td class="gt_row gt_right">3.440</td>
</tr>
</tbody>
</table>


</div>
        
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Conformal Prediction</category>
  <guid>https://dmolitor.com/blog/posts/conformal-beyond-exchangeability/</guid>
  <pubDate>Thu, 25 Jul 2024 00:00:00 GMT</pubDate>
  <media:content url="https://dmolitor.com/blog/posts/conformal-beyond-exchangeability/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Building and Deploying Adaptive Experiments with Shiny</title>
  <link>https://dmolitor.com/blog/posts/dynamic_surveys/</link>
  <description><![CDATA[ 




<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>Understanding discriminatory human choices are of central interest across the social sciences. Typically when studying such questions, researchers employ standard designs such as experimental audit studies or conjoint analyses. Recent advances in the adaptive experimentation literature have explored how multi-armed bandit (MAB) algorithms can be used to answer the same questions with lower cost and greater data efficiency while also mitigating ethical concerns that may arise in some randomized experiments (e.g.&nbsp;assigning participants to harmful treatment arms)<span class="citation" data-cites="offerwestort_adaptive_2021"><sup>1</sup></span> <span class="citation" data-cites="kaibel_rethinking_2021"><sup>2</sup></span>.</p>
<p>Although MAB methods can provide significant improvements over standard experimental methods, implementing adaptive experiments or surveys can pose a challenge. There are many survey platforms at the researcher’s disposal such as Qualtrics, Google Forms, etc. that can quickly accomodate standard survey designs, but these platforms do not easily support the design of adaptive surveys. Without such tools at their disposal, the researcher is stuck needing to design their own custom solution. This is the exact situation that my research team and I ran into a few months ago.</p>
<p>It began with a straightforward enough question. We would like to know, for example, how American adults in the U.S. discriminate on the basis of education when choosing which immigrants to prioritize for immigrant visas?<span class="citation" data-cites="hainmueller_causal_2014"><sup>3</sup></span> Our goal was to explore how we could adopt methods from the adaptive experimentation literature to answer these questions more efficiently than standard methods.</p>
<p>To this end, we framed the question as a stochastic MAB problem. Each arm of the bandit was defined as one set of immigrant characteristics and the outcome of interest (reward) was whether the survey respondent chose to prioritize the immigrant with higher education, given that set of characteristics. We wanted to understand under which set of characteristics American adults are the most likely to discriminate against an immigrant who has lower education.</p>
<p>To uncover the set of characteristics with the most discrimination, we employed a classic algorithm from the adaptive literature in Thompson Sampling (TS)<span class="citation" data-cites="thompson_likelihood_1933"><sup>4</sup></span>. TS is a dynamic algorithm. It starts out by assuming that the probability of discrimination is the same across all sets of immigrant characteristics. Every time a new survey respondent takes the survey, it assigns them to the set of characteristics that has the highest probability of resulting in a discriminatory response. TS then observes whether or not that respondent discriminates, and it updates the probability of discrimination for the set of characteristics which they were assigned to. As the algorithm learns which sets of characteristics are most likely to elicit discriminatory responses, the algorithm progressively assigns more respondents to those arms and stops assigning respondents to characteristics that fail to elicit a discriminatory response.</p>
</section>
<section id="necessity-of-a-custom-survey-form" class="level2">
<h2 class="anchored" data-anchor-id="necessity-of-a-custom-survey-form">Necessity of a custom survey form</h2>
<p>Given the dynamic nature of TS, we needed a survey form that would allow us to estimate a variety of parameters and update historical data every time a new user connected to our form or submitted a survey response. At first we were bullish on Qualtrics for meeting our needs. In fact, the Qualtrics API surfaces endpoints that allow the researcher to deploy certain actions every time a user submits a survey response. Unfortunately, we quickly discovered that this functionality is only available to users with special access. When using an account under an institutional subscription (which is the case at Cornell and probably most universities), you don’t have this special access and so this was a non-starter for us. It also seemed undesirable to be downloading thousands of user responses and manually updating algorithmic parameters.</p>
<p>Not to be deterred, I confidently announced that it would be no problem to build such a survey with <a href="https://shiny.posit.co/py/">Shiny</a> 😬. It turned out to be harder than I initially imagined, but it was indeed possible!</p>
</section>
<section id="architecture" class="level2">
<h2 class="anchored" data-anchor-id="architecture">Architecture</h2>
<p>As I began sketching out the codebase for our survey, I split the structure into three main services:</p>
<ul>
<li><strong>Database</strong>: We needed some form of database to store algorithmic parameters and user responses throughout the duration of the survey. For our application we opted for <a href="https://hub.docker.com/_/postgres">PostgreSQL</a>, though pretty much any database solution would have worked.</li>
<li><strong>API</strong>: The API was built with <a href="https://fastapi.tiangolo.com/">FastAPI</a> and was the workhorse of the application, handling all interactions between the survey form and the database. When a new user would connect to our application, the API would retrieve the historical data from the database, perform an iteration of the TS algorithm, and update the survey form with necessary information such as which bandit arm the user would be assigned to. When the user had finished and submitted the survey, the API would update the corresponding tables and parameters in the database in preparation for new survey respondents.</li>
<li><strong>Frontend</strong>: The frontend was built with Shiny and was the actual survey form. This survey form was not in charge any computational steps, but instead collected all user response data and orchestrated the communication between the API and the database.</li>
</ul>
<p>After creating a working survey application, the next step was to deploy this survey so that it could actually be used by real survey respondents.</p>
</section>
<section id="deployment" class="level2">
<h2 class="anchored" data-anchor-id="deployment">Deployment</h2>
<section id="containerization" class="level3">
<h3 class="anchored" data-anchor-id="containerization">Containerization</h3>
<p>I began by taking each of the three services described above and putting it in its own Docker container. With our services containerized, we could easily deploy our application on any cloud services that support Docker.</p>
</section>
<section id="aws" class="level3">
<h3 class="anchored" data-anchor-id="aws">AWS</h3>
<p>Our cloud provider of choice is AWS, so the next step was to build a simple custom AMI based on Ubuntu that had Docker installed. With our AMI in hand, the final piece of the puzzle was to scale our survey appropriately. There are many tools that could have served our purposes including Kubernetes, AWS Fargate, AWS ECS/EKS, and Docker Swarm. For our purposes, I opted to go with Docker Swarm as this struck a balance between serving our scaling needs while not becoming overly complex.</p>
</section>
<section id="docker-swarm-mode" class="level3">
<h3 class="anchored" data-anchor-id="docker-swarm-mode">Docker Swarm mode</h3>
<p>For our survey, we recruited participants from <a href="https://www.prolific.com/">Prolific</a> and budgeted for a maximum of 10,000 participants. From past Prolific surveys, we expected to see ~1,000 respondents per hour with anywhere between 30-50 concurrent users at all times. To ensure that our survey could easily handle any realistic level of traffic, I deployed our containerized services on a Docker Swarm cluster comprised of one manager AWS instance and ~60 worker AWS instances. All instances were equipped with the custom AMI described above.</p>
<p>At this point, our survey was online with plenty of compute resources available to handle a large number of survey respondents.</p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>Effectively, Docker acts as a load balancer for your swarm services so there’s no need to worry about setting up a load balancer yourself!</p>
</div>
</div>
</div>
</section>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p><strong>TLDR</strong>; we built our custom survey form and served it to ~10,000 survey respondents in 10 hours with the following steps.</p>
<ol type="1">
<li>Developed the survey form with Shiny and added necessary scaffolding (API, database).</li>
<li>Containerized these services to make deployment as easy as possible.</li>
<li>Deployed services on cloud provider (AWS) and scaled the services as necessary with Docker Swarm.</li>
</ol>
</section>
<section id="implementation-tips" class="level2">
<h2 class="anchored" data-anchor-id="implementation-tips">Implementation tips</h2>
<p>The following are a bunch of very specific tips based mostly on things that bit me when building this, or things that would make it better that I just never got around to adding.</p>
<section id="shiny" class="level3">
<h3 class="anchored" data-anchor-id="shiny">Shiny</h3>
<ul>
<li><p>This is probably really obvious, but especially when you need your Shiny app to be somewhat performant, try to streamline time-consuming calculations as much as possible. For example, in our app, I structured any time-consuming steps so that they would happen either at run-time or after the user had clicked “Submit” on the survey form.</p></li>
<li><p>The R Shiny software is much more mature than its Python counterpart and as a result the Python API may not surface all features that the R API does. For example the R Shiny API has a well defined way to access client data being sent to the server. To access the current URL you would do something like:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb1-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the components of the URL in a string:</span></span>
<span id="cb1-3">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>urlText <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderText</span>({</span>
<span id="cb1-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(</span>
<span id="cb1-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="cb1-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"protocol: "</span>, session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>clientData<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>url_protocol, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb1-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hostname: "</span>, session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>clientData<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>url_hostname, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb1-8">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pathname: "</span>, session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>clientData<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>url_pathname, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb1-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"port: "</span>, session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>clientData<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>url_port, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb1-10">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"search: "</span>, session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>clientData<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>url_search, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-11">    )</span>
<span id="cb1-12">  })</span>
<span id="cb1-13">}</span></code></pre></div>
<p>This feature has yet to be officially implemented in Py Shiny, as noted in <a href="https://github.com/posit-dev/py-shiny/issues/711">this GitHub issue</a> but can be worked around as described in <a href="https://github.com/posit-dev/py-shiny/issues/323#issuecomment-1261513108">this issue</a>. The workaround solution would look something like:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> server(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, output, session):</span>
<span id="cb2-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@render.text</span></span>
<span id="cb2-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> urlText():</span>
<span id="cb2-4">        url_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-5">          <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"protocol: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.clientdata_url_protocol'</span>]()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb2-6">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"hostname: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.clientdata_url_hostname'</span>]()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb2-7">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pathname: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.clientdata_url_pathname'</span>]()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb2-8">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"port: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.clientdata_url_port'</span>]()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb2-9">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"search: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.clientdata_url_search'</span>]()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-10">        )</span>
<span id="cb2-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> url_text</span></code></pre></div></li>
</ul>
</section>
<section id="aws-and-docker-swarm-mode" class="level3">
<h3 class="anchored" data-anchor-id="aws-and-docker-swarm-mode">AWS and Docker Swarm mode</h3>
<ul>
<li><p><strong>AWS network rules</strong>: Ports, ports, ports. You need to make sure that all instances in your swarm have Security Group(s) attached with the necessary inbound/outbound rules defined. When running Docker Swarm the following inbound rules are absolutely essential otherwise Swarm mode will not work:</p>
<ul>
<li><strong>TCP</strong> port <strong>2377</strong> for cluster management communications.</li>
<li><strong>TCP and UDP</strong> port <strong>7946</strong> for communication among nodes.</li>
<li><strong>UDP</strong> port <strong>4789</strong> for overlay network traffic.</li>
</ul>
<p>In addition, make sure you add any rules for other ports that are specific to your application. In our case our app was exposed on port 8000 so I needed to add an additional inbound rule for TCP port 8000.</p></li>
<li><p><strong>Adding worker nodes to swarm</strong>: When adding a worker instance to the swarm on AWS, it is essential to include the <code>--advertise-addr</code> argument. For example:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> swarm join <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--token</span> SWMTKN-1-49nj1abc... manager.node.ip:2377 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--advertise-addr</span> worker.node.ip</span></code></pre></div></li>
<li><p><strong>Configuring HTTPS</strong>: When you deploy your Shiny application on an AWS compute instance, e.g.&nbsp;on port 8000, the application will be available at a url looking something like <strong>http://manager.node.ip:8000</strong>. While this works fine, it will look unusual to the average user and may be flagged by some browsers as insecure and result in warning messages being sent to the user. If it is important to have HTTPS configured for your application, there are a couple ways to approach this. Both require having a domain or sub-domain name available.</p>
<ol type="1">
<li>Once you have launched your application (or swarm) on AWS, configure a DNS record on your domain to forward your sub-domain to the public IP address of the server where your application is hosted. This process may vary slightly depending on where you purchased your domain name (e.g.&nbsp;Bluehost, Namecheap).</li>
<li>Install and configure <strong>nginx</strong> to forward traffic from port 80 to whatever port your application is running on.</li>
<li>Configure <strong>nginx</strong> with SSL/TLS certificates using <a href="https://letsencrypt.org/">Let’s Encrypt</a>.</li>
</ol>
<p>There are many good online tutorials on exactly how to do <strong>steps 2 and 3</strong>. The main shortcoming with the method described above is that you would have to do all three steps separately every time you re-deploy your services on AWS. If you only deploy once, this may not be an issue. But if you think you might terminate and re-deploy your application multiple times, it may get tiresome. One way around this is to allocate an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">AWS Elastic IP address</a> to your account and then create a DNS record on your domain pointing to the elastic IP per <strong>step 1</strong> above. Then, every time you launch your application on a new AWS compute instance you can associate the elastic IP address with your instance, and you don’t need to re-do <strong>step 1</strong>. You will still have to do <strong>steps 2 and 3</strong>, but you can do these steps programmatically. <strong>Step 1</strong> is by far the most time consuming and you will only have to do that once.</p></li>
<li><p><strong>Persisting data with AWS volumes</strong>: When running your application on AWS, or any cloud provider, there is always the concern that your compute resources might get terminated without any warning. As such, it is essential that all your data be backed up so that it will persist regardless of whether your application terminates or not. For our application, we created an AWS volume and mounted that volume to the local filesystem of the compute instance where our database container was running. We then used a <a href="https://docs.docker.com/storage/bind-mounts/">bind mount</a> to mount that directory on the host machine into the PostgreSQL Docker container.</p></li>
<li><p><strong>Scaling the application</strong>: Py Shiny is built on <a href="https://www.uvicorn.org/">uvicorn</a>. As a direct result, a user can deploy a Shiny application by simply running the following on the command line:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uvicorn</span> app:app <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--host</span> 0.0.0.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--port</span> 8000</span></code></pre></div>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>The first <strong>app</strong> references the file <strong>app.py</strong> where your application is defined, and the second <strong>app</strong> references the final line in your <strong>app.py</strong> file that should look something like:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> App(app_ui, server)</span></code></pre></div>
</div>
</div>
</div>
<p>Uvicorn has scaling built-in via the <code>--workers</code> argument. If you wanted to scale your application in a super simple way and avoid all the hassle above, it’s as easy as deploying your application on a very large AWS server and running it with something like:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uvicorn</span> app:app <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--host</span> 0.0.0.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--port</span> 8000 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--workers</span> 20</span></code></pre></div>
<p>For several reasons this approach didn’t work for our situation, but it may be a reasonable approach for many people. To see more about self-hosted deployment, see the <a href="https://shiny.posit.co/py/docs/deploy-on-prem.html">Shiny docs</a> or the <a href="https://www.uvicorn.org/deployment/">uvicorn docs</a>.</p></li>
</ul>
</section>
<section id="general" class="level3">
<h3 class="anchored" data-anchor-id="general">General</h3>
<p>In building and deploying our application there were a bunch of small, almost unnoticeable steps that go into each larger step. For example, when I wanted to deploy our survey onto AWS, there were several preliminary steps:</p>
<ul>
<li><p>Build and push the Docker images for all three services to DockerHub.</p></li>
<li><p>Create all AWS resources (e.g.&nbsp;security group, volume, etc.)</p></li>
<li><p>Spin up the Docker swarm and deploy our application.</p></li>
</ul>
<p>When you’re actively developing a project it’s easy to remember all the pre-requisite steps that go into each larger step. However, it’s really easy to quickly forget these things and to come back weeks or months later and struggle to build or deploy your application. So do your future self a favor and use a build tool like <a href="https://github.com/casey/just">just</a>! Not only does this remove a lot of key-strokes when you’re developing an application, but it codifies all the easy-to-forget steps for your future self.</p>
</section>
</section>
<section id="code" class="level2">
<h2 class="anchored" data-anchor-id="code">Code</h2>
<p>To browse the code that corresponds to each part of this post, check out the GitHub repo <a href="https://github.com/dmolitor/adaptive-infra">here</a> and feel free to reach out with any questions or drop an issue on the repo!</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-offerwestort_adaptive_2021" class="csl-entry">
<div class="csl-left-margin">1. </div><div class="csl-right-inline">Offer‐Westort, M., Coppock, A. &amp; Green, D. P. <a href="https://doi.org/10.1111/ajps.12597">Adaptive experimental design: Prospects and applications in political science</a>. <em>American J Political Sci</em> <strong>65</strong>, 826–844 (2021).</div>
</div>
<div id="ref-kaibel_rethinking_2021" class="csl-entry">
<div class="csl-left-margin">2. </div><div class="csl-right-inline">Kaibel, C. &amp; Biemann, T. <a href="https://doi.org/10.1177/1094428119854153">Rethinking the gold standard with multi-armed bandits: Machine learning allocation algorithms for experiments</a>. <em>Organizational Research Methods</em> <strong>24</strong>, 78–103 (2021).</div>
</div>
<div id="ref-hainmueller_causal_2014" class="csl-entry">
<div class="csl-left-margin">3. </div><div class="csl-right-inline">Hainmueller, J., Hopkins, D. J. &amp; Yamamoto, T. <a href="https://doi.org/10.1093/pan/mpt024">Causal inference in conjoint analysis: Understanding multidimensional choices via stated preference experiments</a>. <em>Polit. anal.</em> <strong>22</strong>, 1–30 (2014).</div>
</div>
<div id="ref-thompson_likelihood_1933" class="csl-entry">
<div class="csl-left-margin">4. </div><div class="csl-right-inline">Thompson, W. R. <a href="https://doi.org/10.2307/2332286">On the likelihood that one unknown probability exceeds another in view of the evidence of two samples</a>. <em>Biometrika</em> <strong>25</strong>, 285 (1933).</div>
</div>
</div></section></div> ]]></description>
  <category>AWS</category>
  <category>Bandits</category>
  <category>Docker</category>
  <category>Shiny</category>
  <guid>https://dmolitor.com/blog/posts/dynamic_surveys/</guid>
  <pubDate>Wed, 17 Jul 2024 00:00:00 GMT</pubDate>
  <media:content url="https://dmolitor.com/blog/posts/dynamic_surveys/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
